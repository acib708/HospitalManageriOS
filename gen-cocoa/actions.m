/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "actions.h"

@implementation Doctor

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClave: (NSString *) clave nombre: (NSString *) nombre direccion: (NSString *) direccion especialidad: (NSString *) especialidad telefono: (NSString *) telefono foto: (NSString *) foto
{
  self = [super init];
  __clave = [clave retain_stub];
  __clave_isset = YES;
  __nombre = [nombre retain_stub];
  __nombre_isset = YES;
  __direccion = [direccion retain_stub];
  __direccion_isset = YES;
  __especialidad = [especialidad retain_stub];
  __especialidad_isset = YES;
  __telefono = [telefono retain_stub];
  __telefono_isset = YES;
  __foto = [foto retain_stub];
  __foto_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clave"])
  {
    __clave = [[decoder decodeObjectForKey: @"clave"] retain_stub];
    __clave_isset = YES;
  }
  if ([decoder containsValueForKey: @"nombre"])
  {
    __nombre = [[decoder decodeObjectForKey: @"nombre"] retain_stub];
    __nombre_isset = YES;
  }
  if ([decoder containsValueForKey: @"direccion"])
  {
    __direccion = [[decoder decodeObjectForKey: @"direccion"] retain_stub];
    __direccion_isset = YES;
  }
  if ([decoder containsValueForKey: @"especialidad"])
  {
    __especialidad = [[decoder decodeObjectForKey: @"especialidad"] retain_stub];
    __especialidad_isset = YES;
  }
  if ([decoder containsValueForKey: @"telefono"])
  {
    __telefono = [[decoder decodeObjectForKey: @"telefono"] retain_stub];
    __telefono_isset = YES;
  }
  if ([decoder containsValueForKey: @"foto"])
  {
    __foto = [[decoder decodeObjectForKey: @"foto"] retain_stub];
    __foto_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clave_isset)
  {
    [encoder encodeObject: __clave forKey: @"clave"];
  }
  if (__nombre_isset)
  {
    [encoder encodeObject: __nombre forKey: @"nombre"];
  }
  if (__direccion_isset)
  {
    [encoder encodeObject: __direccion forKey: @"direccion"];
  }
  if (__especialidad_isset)
  {
    [encoder encodeObject: __especialidad forKey: @"especialidad"];
  }
  if (__telefono_isset)
  {
    [encoder encodeObject: __telefono forKey: @"telefono"];
  }
  if (__foto_isset)
  {
    [encoder encodeObject: __foto forKey: @"foto"];
  }
}

- (void) dealloc
{
  [__clave release_stub];
  [__nombre release_stub];
  [__direccion release_stub];
  [__especialidad release_stub];
  [__telefono release_stub];
  [__foto release_stub];
  [super dealloc_stub];
}

- (NSString *) clave {
  return [[__clave retain_stub] autorelease_stub];
}

- (void) setClave: (NSString *) clave {
  [clave retain_stub];
  [__clave release_stub];
  __clave = clave;
  __clave_isset = YES;
}

- (BOOL) claveIsSet {
  return __clave_isset;
}

- (void) unsetClave {
  [__clave release_stub];
  __clave = nil;
  __clave_isset = NO;
}

- (NSString *) nombre {
  return [[__nombre retain_stub] autorelease_stub];
}

- (void) setNombre: (NSString *) nombre {
  [nombre retain_stub];
  [__nombre release_stub];
  __nombre = nombre;
  __nombre_isset = YES;
}

- (BOOL) nombreIsSet {
  return __nombre_isset;
}

- (void) unsetNombre {
  [__nombre release_stub];
  __nombre = nil;
  __nombre_isset = NO;
}

- (NSString *) direccion {
  return [[__direccion retain_stub] autorelease_stub];
}

- (void) setDireccion: (NSString *) direccion {
  [direccion retain_stub];
  [__direccion release_stub];
  __direccion = direccion;
  __direccion_isset = YES;
}

- (BOOL) direccionIsSet {
  return __direccion_isset;
}

- (void) unsetDireccion {
  [__direccion release_stub];
  __direccion = nil;
  __direccion_isset = NO;
}

- (NSString *) especialidad {
  return [[__especialidad retain_stub] autorelease_stub];
}

- (void) setEspecialidad: (NSString *) especialidad {
  [especialidad retain_stub];
  [__especialidad release_stub];
  __especialidad = especialidad;
  __especialidad_isset = YES;
}

- (BOOL) especialidadIsSet {
  return __especialidad_isset;
}

- (void) unsetEspecialidad {
  [__especialidad release_stub];
  __especialidad = nil;
  __especialidad_isset = NO;
}

- (NSString *) telefono {
  return [[__telefono retain_stub] autorelease_stub];
}

- (void) setTelefono: (NSString *) telefono {
  [telefono retain_stub];
  [__telefono release_stub];
  __telefono = telefono;
  __telefono_isset = YES;
}

- (BOOL) telefonoIsSet {
  return __telefono_isset;
}

- (void) unsetTelefono {
  [__telefono release_stub];
  __telefono = nil;
  __telefono_isset = NO;
}

- (NSString *) foto {
  return [[__foto retain_stub] autorelease_stub];
}

- (void) setFoto: (NSString *) foto {
  [foto retain_stub];
  [__foto release_stub];
  __foto = foto;
  __foto_isset = YES;
}

- (BOOL) fotoIsSet {
  return __foto_isset;
}

- (void) unsetFoto {
  [__foto release_stub];
  __foto = nil;
  __foto_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClave: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNombre: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDireccion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEspecialidad: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTelefono: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFoto: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Doctor"];
  if (__clave_isset) {
    if (__clave != nil) {
      [outProtocol writeFieldBeginWithName: @"clave" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clave];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nombre_isset) {
    if (__nombre != nil) {
      [outProtocol writeFieldBeginWithName: @"nombre" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __nombre];
      [outProtocol writeFieldEnd];
    }
  }
  if (__direccion_isset) {
    if (__direccion != nil) {
      [outProtocol writeFieldBeginWithName: @"direccion" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __direccion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__especialidad_isset) {
    if (__especialidad != nil) {
      [outProtocol writeFieldBeginWithName: @"especialidad" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __especialidad];
      [outProtocol writeFieldEnd];
    }
  }
  if (__telefono_isset) {
    if (__telefono != nil) {
      [outProtocol writeFieldBeginWithName: @"telefono" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __telefono];
      [outProtocol writeFieldEnd];
    }
  }
  if (__foto_isset) {
    if (__foto != nil) {
      [outProtocol writeFieldBeginWithName: @"foto" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __foto];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Doctor("];
  [ms appendString: @"clave:"];
  [ms appendFormat: @"\"%@\"", __clave];
  [ms appendString: @",nombre:"];
  [ms appendFormat: @"\"%@\"", __nombre];
  [ms appendString: @",direccion:"];
  [ms appendFormat: @"\"%@\"", __direccion];
  [ms appendString: @",especialidad:"];
  [ms appendFormat: @"\"%@\"", __especialidad];
  [ms appendString: @",telefono:"];
  [ms appendFormat: @"\"%@\"", __telefono];
  [ms appendString: @",foto:"];
  [ms appendFormat: @"\"%@\"", __foto];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AnalisisClinico

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClave: (NSString *) clave tipo: (NSString *) tipo descripcion: (NSString *) descripcion
{
  self = [super init];
  __clave = [clave retain_stub];
  __clave_isset = YES;
  __tipo = [tipo retain_stub];
  __tipo_isset = YES;
  __descripcion = [descripcion retain_stub];
  __descripcion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clave"])
  {
    __clave = [[decoder decodeObjectForKey: @"clave"] retain_stub];
    __clave_isset = YES;
  }
  if ([decoder containsValueForKey: @"tipo"])
  {
    __tipo = [[decoder decodeObjectForKey: @"tipo"] retain_stub];
    __tipo_isset = YES;
  }
  if ([decoder containsValueForKey: @"descripcion"])
  {
    __descripcion = [[decoder decodeObjectForKey: @"descripcion"] retain_stub];
    __descripcion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clave_isset)
  {
    [encoder encodeObject: __clave forKey: @"clave"];
  }
  if (__tipo_isset)
  {
    [encoder encodeObject: __tipo forKey: @"tipo"];
  }
  if (__descripcion_isset)
  {
    [encoder encodeObject: __descripcion forKey: @"descripcion"];
  }
}

- (void) dealloc
{
  [__clave release_stub];
  [__tipo release_stub];
  [__descripcion release_stub];
  [super dealloc_stub];
}

- (NSString *) clave {
  return [[__clave retain_stub] autorelease_stub];
}

- (void) setClave: (NSString *) clave {
  [clave retain_stub];
  [__clave release_stub];
  __clave = clave;
  __clave_isset = YES;
}

- (BOOL) claveIsSet {
  return __clave_isset;
}

- (void) unsetClave {
  [__clave release_stub];
  __clave = nil;
  __clave_isset = NO;
}

- (NSString *) tipo {
  return [[__tipo retain_stub] autorelease_stub];
}

- (void) setTipo: (NSString *) tipo {
  [tipo retain_stub];
  [__tipo release_stub];
  __tipo = tipo;
  __tipo_isset = YES;
}

- (BOOL) tipoIsSet {
  return __tipo_isset;
}

- (void) unsetTipo {
  [__tipo release_stub];
  __tipo = nil;
  __tipo_isset = NO;
}

- (NSString *) descripcion {
  return [[__descripcion retain_stub] autorelease_stub];
}

- (void) setDescripcion: (NSString *) descripcion {
  [descripcion retain_stub];
  [__descripcion release_stub];
  __descripcion = descripcion;
  __descripcion_isset = YES;
}

- (BOOL) descripcionIsSet {
  return __descripcion_isset;
}

- (void) unsetDescripcion {
  [__descripcion release_stub];
  __descripcion = nil;
  __descripcion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClave: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTipo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescripcion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AnalisisClinico"];
  if (__clave_isset) {
    if (__clave != nil) {
      [outProtocol writeFieldBeginWithName: @"clave" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clave];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tipo_isset) {
    if (__tipo != nil) {
      [outProtocol writeFieldBeginWithName: @"tipo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __tipo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__descripcion_isset) {
    if (__descripcion != nil) {
      [outProtocol writeFieldBeginWithName: @"descripcion" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __descripcion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AnalisisClinico("];
  [ms appendString: @"clave:"];
  [ms appendFormat: @"\"%@\"", __clave];
  [ms appendString: @",tipo:"];
  [ms appendFormat: @"\"%@\"", __tipo];
  [ms appendString: @",descripcion:"];
  [ms appendFormat: @"\"%@\"", __descripcion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Atiende

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClaveDoctor: (NSString *) claveDoctor clavePaciente: (NSString *) clavePaciente fecha: (NSString *) fecha tratamiento: (NSString *) tratamiento diagnostico: (NSString *) diagnostico fotoDoctor: (NSString *) fotoDoctor fotoPaciente: (NSString *) fotoPaciente
{
  self = [super init];
  __claveDoctor = [claveDoctor retain_stub];
  __claveDoctor_isset = YES;
  __clavePaciente = [clavePaciente retain_stub];
  __clavePaciente_isset = YES;
  __fecha = [fecha retain_stub];
  __fecha_isset = YES;
  __tratamiento = [tratamiento retain_stub];
  __tratamiento_isset = YES;
  __diagnostico = [diagnostico retain_stub];
  __diagnostico_isset = YES;
  __fotoDoctor = [fotoDoctor retain_stub];
  __fotoDoctor_isset = YES;
  __fotoPaciente = [fotoPaciente retain_stub];
  __fotoPaciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"claveDoctor"])
  {
    __claveDoctor = [[decoder decodeObjectForKey: @"claveDoctor"] retain_stub];
    __claveDoctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"clavePaciente"])
  {
    __clavePaciente = [[decoder decodeObjectForKey: @"clavePaciente"] retain_stub];
    __clavePaciente_isset = YES;
  }
  if ([decoder containsValueForKey: @"fecha"])
  {
    __fecha = [[decoder decodeObjectForKey: @"fecha"] retain_stub];
    __fecha_isset = YES;
  }
  if ([decoder containsValueForKey: @"tratamiento"])
  {
    __tratamiento = [[decoder decodeObjectForKey: @"tratamiento"] retain_stub];
    __tratamiento_isset = YES;
  }
  if ([decoder containsValueForKey: @"diagnostico"])
  {
    __diagnostico = [[decoder decodeObjectForKey: @"diagnostico"] retain_stub];
    __diagnostico_isset = YES;
  }
  if ([decoder containsValueForKey: @"fotoDoctor"])
  {
    __fotoDoctor = [[decoder decodeObjectForKey: @"fotoDoctor"] retain_stub];
    __fotoDoctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"fotoPaciente"])
  {
    __fotoPaciente = [[decoder decodeObjectForKey: @"fotoPaciente"] retain_stub];
    __fotoPaciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__claveDoctor_isset)
  {
    [encoder encodeObject: __claveDoctor forKey: @"claveDoctor"];
  }
  if (__clavePaciente_isset)
  {
    [encoder encodeObject: __clavePaciente forKey: @"clavePaciente"];
  }
  if (__fecha_isset)
  {
    [encoder encodeObject: __fecha forKey: @"fecha"];
  }
  if (__tratamiento_isset)
  {
    [encoder encodeObject: __tratamiento forKey: @"tratamiento"];
  }
  if (__diagnostico_isset)
  {
    [encoder encodeObject: __diagnostico forKey: @"diagnostico"];
  }
  if (__fotoDoctor_isset)
  {
    [encoder encodeObject: __fotoDoctor forKey: @"fotoDoctor"];
  }
  if (__fotoPaciente_isset)
  {
    [encoder encodeObject: __fotoPaciente forKey: @"fotoPaciente"];
  }
}

- (void) dealloc
{
  [__claveDoctor release_stub];
  [__clavePaciente release_stub];
  [__fecha release_stub];
  [__tratamiento release_stub];
  [__diagnostico release_stub];
  [__fotoDoctor release_stub];
  [__fotoPaciente release_stub];
  [super dealloc_stub];
}

- (NSString *) claveDoctor {
  return [[__claveDoctor retain_stub] autorelease_stub];
}

- (void) setClaveDoctor: (NSString *) claveDoctor {
  [claveDoctor retain_stub];
  [__claveDoctor release_stub];
  __claveDoctor = claveDoctor;
  __claveDoctor_isset = YES;
}

- (BOOL) claveDoctorIsSet {
  return __claveDoctor_isset;
}

- (void) unsetClaveDoctor {
  [__claveDoctor release_stub];
  __claveDoctor = nil;
  __claveDoctor_isset = NO;
}

- (NSString *) clavePaciente {
  return [[__clavePaciente retain_stub] autorelease_stub];
}

- (void) setClavePaciente: (NSString *) clavePaciente {
  [clavePaciente retain_stub];
  [__clavePaciente release_stub];
  __clavePaciente = clavePaciente;
  __clavePaciente_isset = YES;
}

- (BOOL) clavePacienteIsSet {
  return __clavePaciente_isset;
}

- (void) unsetClavePaciente {
  [__clavePaciente release_stub];
  __clavePaciente = nil;
  __clavePaciente_isset = NO;
}

- (NSString *) fecha {
  return [[__fecha retain_stub] autorelease_stub];
}

- (void) setFecha: (NSString *) fecha {
  [fecha retain_stub];
  [__fecha release_stub];
  __fecha = fecha;
  __fecha_isset = YES;
}

- (BOOL) fechaIsSet {
  return __fecha_isset;
}

- (void) unsetFecha {
  [__fecha release_stub];
  __fecha = nil;
  __fecha_isset = NO;
}

- (NSString *) tratamiento {
  return [[__tratamiento retain_stub] autorelease_stub];
}

- (void) setTratamiento: (NSString *) tratamiento {
  [tratamiento retain_stub];
  [__tratamiento release_stub];
  __tratamiento = tratamiento;
  __tratamiento_isset = YES;
}

- (BOOL) tratamientoIsSet {
  return __tratamiento_isset;
}

- (void) unsetTratamiento {
  [__tratamiento release_stub];
  __tratamiento = nil;
  __tratamiento_isset = NO;
}

- (NSString *) diagnostico {
  return [[__diagnostico retain_stub] autorelease_stub];
}

- (void) setDiagnostico: (NSString *) diagnostico {
  [diagnostico retain_stub];
  [__diagnostico release_stub];
  __diagnostico = diagnostico;
  __diagnostico_isset = YES;
}

- (BOOL) diagnosticoIsSet {
  return __diagnostico_isset;
}

- (void) unsetDiagnostico {
  [__diagnostico release_stub];
  __diagnostico = nil;
  __diagnostico_isset = NO;
}

- (NSString *) fotoDoctor {
  return [[__fotoDoctor retain_stub] autorelease_stub];
}

- (void) setFotoDoctor: (NSString *) fotoDoctor {
  [fotoDoctor retain_stub];
  [__fotoDoctor release_stub];
  __fotoDoctor = fotoDoctor;
  __fotoDoctor_isset = YES;
}

- (BOOL) fotoDoctorIsSet {
  return __fotoDoctor_isset;
}

- (void) unsetFotoDoctor {
  [__fotoDoctor release_stub];
  __fotoDoctor = nil;
  __fotoDoctor_isset = NO;
}

- (NSString *) fotoPaciente {
  return [[__fotoPaciente retain_stub] autorelease_stub];
}

- (void) setFotoPaciente: (NSString *) fotoPaciente {
  [fotoPaciente retain_stub];
  [__fotoPaciente release_stub];
  __fotoPaciente = fotoPaciente;
  __fotoPaciente_isset = YES;
}

- (BOOL) fotoPacienteIsSet {
  return __fotoPaciente_isset;
}

- (void) unsetFotoPaciente {
  [__fotoPaciente release_stub];
  __fotoPaciente = nil;
  __fotoPaciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaveDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClavePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFecha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTratamiento: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiagnostico: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFotoDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFotoPaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Atiende"];
  if (__claveDoctor_isset) {
    if (__claveDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"claveDoctor" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __claveDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clavePaciente_isset) {
    if (__clavePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __clavePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fecha_isset) {
    if (__fecha != nil) {
      [outProtocol writeFieldBeginWithName: @"fecha" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __fecha];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tratamiento_isset) {
    if (__tratamiento != nil) {
      [outProtocol writeFieldBeginWithName: @"tratamiento" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __tratamiento];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diagnostico_isset) {
    if (__diagnostico != nil) {
      [outProtocol writeFieldBeginWithName: @"diagnostico" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __diagnostico];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fotoDoctor_isset) {
    if (__fotoDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"fotoDoctor" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __fotoDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fotoPaciente_isset) {
    if (__fotoPaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"fotoPaciente" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __fotoPaciente];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Atiende("];
  [ms appendString: @"claveDoctor:"];
  [ms appendFormat: @"\"%@\"", __claveDoctor];
  [ms appendString: @",clavePaciente:"];
  [ms appendFormat: @"\"%@\"", __clavePaciente];
  [ms appendString: @",fecha:"];
  [ms appendFormat: @"\"%@\"", __fecha];
  [ms appendString: @",tratamiento:"];
  [ms appendFormat: @"\"%@\"", __tratamiento];
  [ms appendString: @",diagnostico:"];
  [ms appendFormat: @"\"%@\"", __diagnostico];
  [ms appendString: @",fotoDoctor:"];
  [ms appendFormat: @"\"%@\"", __fotoDoctor];
  [ms appendString: @",fotoPaciente:"];
  [ms appendFormat: @"\"%@\"", __fotoPaciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Paciente

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClave: (NSString *) clave nombre: (NSString *) nombre direccion: (NSString *) direccion telefono: (NSString *) telefono foto: (NSString *) foto
{
  self = [super init];
  __clave = [clave retain_stub];
  __clave_isset = YES;
  __nombre = [nombre retain_stub];
  __nombre_isset = YES;
  __direccion = [direccion retain_stub];
  __direccion_isset = YES;
  __telefono = [telefono retain_stub];
  __telefono_isset = YES;
  __foto = [foto retain_stub];
  __foto_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clave"])
  {
    __clave = [[decoder decodeObjectForKey: @"clave"] retain_stub];
    __clave_isset = YES;
  }
  if ([decoder containsValueForKey: @"nombre"])
  {
    __nombre = [[decoder decodeObjectForKey: @"nombre"] retain_stub];
    __nombre_isset = YES;
  }
  if ([decoder containsValueForKey: @"direccion"])
  {
    __direccion = [[decoder decodeObjectForKey: @"direccion"] retain_stub];
    __direccion_isset = YES;
  }
  if ([decoder containsValueForKey: @"telefono"])
  {
    __telefono = [[decoder decodeObjectForKey: @"telefono"] retain_stub];
    __telefono_isset = YES;
  }
  if ([decoder containsValueForKey: @"foto"])
  {
    __foto = [[decoder decodeObjectForKey: @"foto"] retain_stub];
    __foto_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clave_isset)
  {
    [encoder encodeObject: __clave forKey: @"clave"];
  }
  if (__nombre_isset)
  {
    [encoder encodeObject: __nombre forKey: @"nombre"];
  }
  if (__direccion_isset)
  {
    [encoder encodeObject: __direccion forKey: @"direccion"];
  }
  if (__telefono_isset)
  {
    [encoder encodeObject: __telefono forKey: @"telefono"];
  }
  if (__foto_isset)
  {
    [encoder encodeObject: __foto forKey: @"foto"];
  }
}

- (void) dealloc
{
  [__clave release_stub];
  [__nombre release_stub];
  [__direccion release_stub];
  [__telefono release_stub];
  [__foto release_stub];
  [super dealloc_stub];
}

- (NSString *) clave {
  return [[__clave retain_stub] autorelease_stub];
}

- (void) setClave: (NSString *) clave {
  [clave retain_stub];
  [__clave release_stub];
  __clave = clave;
  __clave_isset = YES;
}

- (BOOL) claveIsSet {
  return __clave_isset;
}

- (void) unsetClave {
  [__clave release_stub];
  __clave = nil;
  __clave_isset = NO;
}

- (NSString *) nombre {
  return [[__nombre retain_stub] autorelease_stub];
}

- (void) setNombre: (NSString *) nombre {
  [nombre retain_stub];
  [__nombre release_stub];
  __nombre = nombre;
  __nombre_isset = YES;
}

- (BOOL) nombreIsSet {
  return __nombre_isset;
}

- (void) unsetNombre {
  [__nombre release_stub];
  __nombre = nil;
  __nombre_isset = NO;
}

- (NSString *) direccion {
  return [[__direccion retain_stub] autorelease_stub];
}

- (void) setDireccion: (NSString *) direccion {
  [direccion retain_stub];
  [__direccion release_stub];
  __direccion = direccion;
  __direccion_isset = YES;
}

- (BOOL) direccionIsSet {
  return __direccion_isset;
}

- (void) unsetDireccion {
  [__direccion release_stub];
  __direccion = nil;
  __direccion_isset = NO;
}

- (NSString *) telefono {
  return [[__telefono retain_stub] autorelease_stub];
}

- (void) setTelefono: (NSString *) telefono {
  [telefono retain_stub];
  [__telefono release_stub];
  __telefono = telefono;
  __telefono_isset = YES;
}

- (BOOL) telefonoIsSet {
  return __telefono_isset;
}

- (void) unsetTelefono {
  [__telefono release_stub];
  __telefono = nil;
  __telefono_isset = NO;
}

- (NSString *) foto {
  return [[__foto retain_stub] autorelease_stub];
}

- (void) setFoto: (NSString *) foto {
  [foto retain_stub];
  [__foto release_stub];
  __foto = foto;
  __foto_isset = YES;
}

- (BOOL) fotoIsSet {
  return __foto_isset;
}

- (void) unsetFoto {
  [__foto release_stub];
  __foto = nil;
  __foto_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClave: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNombre: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDireccion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTelefono: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFoto: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Paciente"];
  if (__clave_isset) {
    if (__clave != nil) {
      [outProtocol writeFieldBeginWithName: @"clave" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clave];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nombre_isset) {
    if (__nombre != nil) {
      [outProtocol writeFieldBeginWithName: @"nombre" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __nombre];
      [outProtocol writeFieldEnd];
    }
  }
  if (__direccion_isset) {
    if (__direccion != nil) {
      [outProtocol writeFieldBeginWithName: @"direccion" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __direccion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__telefono_isset) {
    if (__telefono != nil) {
      [outProtocol writeFieldBeginWithName: @"telefono" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __telefono];
      [outProtocol writeFieldEnd];
    }
  }
  if (__foto_isset) {
    if (__foto != nil) {
      [outProtocol writeFieldBeginWithName: @"foto" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __foto];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Paciente("];
  [ms appendString: @"clave:"];
  [ms appendFormat: @"\"%@\"", __clave];
  [ms appendString: @",nombre:"];
  [ms appendFormat: @"\"%@\"", __nombre];
  [ms appendString: @",direccion:"];
  [ms appendFormat: @"\"%@\"", __direccion];
  [ms appendString: @",telefono:"];
  [ms appendFormat: @"\"%@\"", __telefono];
  [ms appendString: @",foto:"];
  [ms appendFormat: @"\"%@\"", __foto];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SeRealiza

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClaveAnalisis: (NSString *) claveAnalisis clavePaciente: (NSString *) clavePaciente fechaAplic: (NSString *) fechaAplic fechaEntrega: (NSString *) fechaEntrega fotoPaciente: (NSString *) fotoPaciente
{
  self = [super init];
  __claveAnalisis = [claveAnalisis retain_stub];
  __claveAnalisis_isset = YES;
  __clavePaciente = [clavePaciente retain_stub];
  __clavePaciente_isset = YES;
  __fechaAplic = [fechaAplic retain_stub];
  __fechaAplic_isset = YES;
  __fechaEntrega = [fechaEntrega retain_stub];
  __fechaEntrega_isset = YES;
  __fotoPaciente = [fotoPaciente retain_stub];
  __fotoPaciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"claveAnalisis"])
  {
    __claveAnalisis = [[decoder decodeObjectForKey: @"claveAnalisis"] retain_stub];
    __claveAnalisis_isset = YES;
  }
  if ([decoder containsValueForKey: @"clavePaciente"])
  {
    __clavePaciente = [[decoder decodeObjectForKey: @"clavePaciente"] retain_stub];
    __clavePaciente_isset = YES;
  }
  if ([decoder containsValueForKey: @"fechaAplic"])
  {
    __fechaAplic = [[decoder decodeObjectForKey: @"fechaAplic"] retain_stub];
    __fechaAplic_isset = YES;
  }
  if ([decoder containsValueForKey: @"fechaEntrega"])
  {
    __fechaEntrega = [[decoder decodeObjectForKey: @"fechaEntrega"] retain_stub];
    __fechaEntrega_isset = YES;
  }
  if ([decoder containsValueForKey: @"fotoPaciente"])
  {
    __fotoPaciente = [[decoder decodeObjectForKey: @"fotoPaciente"] retain_stub];
    __fotoPaciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__claveAnalisis_isset)
  {
    [encoder encodeObject: __claveAnalisis forKey: @"claveAnalisis"];
  }
  if (__clavePaciente_isset)
  {
    [encoder encodeObject: __clavePaciente forKey: @"clavePaciente"];
  }
  if (__fechaAplic_isset)
  {
    [encoder encodeObject: __fechaAplic forKey: @"fechaAplic"];
  }
  if (__fechaEntrega_isset)
  {
    [encoder encodeObject: __fechaEntrega forKey: @"fechaEntrega"];
  }
  if (__fotoPaciente_isset)
  {
    [encoder encodeObject: __fotoPaciente forKey: @"fotoPaciente"];
  }
}

- (void) dealloc
{
  [__claveAnalisis release_stub];
  [__clavePaciente release_stub];
  [__fechaAplic release_stub];
  [__fechaEntrega release_stub];
  [__fotoPaciente release_stub];
  [super dealloc_stub];
}

- (NSString *) claveAnalisis {
  return [[__claveAnalisis retain_stub] autorelease_stub];
}

- (void) setClaveAnalisis: (NSString *) claveAnalisis {
  [claveAnalisis retain_stub];
  [__claveAnalisis release_stub];
  __claveAnalisis = claveAnalisis;
  __claveAnalisis_isset = YES;
}

- (BOOL) claveAnalisisIsSet {
  return __claveAnalisis_isset;
}

- (void) unsetClaveAnalisis {
  [__claveAnalisis release_stub];
  __claveAnalisis = nil;
  __claveAnalisis_isset = NO;
}

- (NSString *) clavePaciente {
  return [[__clavePaciente retain_stub] autorelease_stub];
}

- (void) setClavePaciente: (NSString *) clavePaciente {
  [clavePaciente retain_stub];
  [__clavePaciente release_stub];
  __clavePaciente = clavePaciente;
  __clavePaciente_isset = YES;
}

- (BOOL) clavePacienteIsSet {
  return __clavePaciente_isset;
}

- (void) unsetClavePaciente {
  [__clavePaciente release_stub];
  __clavePaciente = nil;
  __clavePaciente_isset = NO;
}

- (NSString *) fechaAplic {
  return [[__fechaAplic retain_stub] autorelease_stub];
}

- (void) setFechaAplic: (NSString *) fechaAplic {
  [fechaAplic retain_stub];
  [__fechaAplic release_stub];
  __fechaAplic = fechaAplic;
  __fechaAplic_isset = YES;
}

- (BOOL) fechaAplicIsSet {
  return __fechaAplic_isset;
}

- (void) unsetFechaAplic {
  [__fechaAplic release_stub];
  __fechaAplic = nil;
  __fechaAplic_isset = NO;
}

- (NSString *) fechaEntrega {
  return [[__fechaEntrega retain_stub] autorelease_stub];
}

- (void) setFechaEntrega: (NSString *) fechaEntrega {
  [fechaEntrega retain_stub];
  [__fechaEntrega release_stub];
  __fechaEntrega = fechaEntrega;
  __fechaEntrega_isset = YES;
}

- (BOOL) fechaEntregaIsSet {
  return __fechaEntrega_isset;
}

- (void) unsetFechaEntrega {
  [__fechaEntrega release_stub];
  __fechaEntrega = nil;
  __fechaEntrega_isset = NO;
}

- (NSString *) fotoPaciente {
  return [[__fotoPaciente retain_stub] autorelease_stub];
}

- (void) setFotoPaciente: (NSString *) fotoPaciente {
  [fotoPaciente retain_stub];
  [__fotoPaciente release_stub];
  __fotoPaciente = fotoPaciente;
  __fotoPaciente_isset = YES;
}

- (BOOL) fotoPacienteIsSet {
  return __fotoPaciente_isset;
}

- (void) unsetFotoPaciente {
  [__fotoPaciente release_stub];
  __fotoPaciente = nil;
  __fotoPaciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaveAnalisis: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClavePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFechaAplic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFechaEntrega: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFotoPaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SeRealiza"];
  if (__claveAnalisis_isset) {
    if (__claveAnalisis != nil) {
      [outProtocol writeFieldBeginWithName: @"claveAnalisis" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __claveAnalisis];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clavePaciente_isset) {
    if (__clavePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __clavePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fechaAplic_isset) {
    if (__fechaAplic != nil) {
      [outProtocol writeFieldBeginWithName: @"fechaAplic" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __fechaAplic];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fechaEntrega_isset) {
    if (__fechaEntrega != nil) {
      [outProtocol writeFieldBeginWithName: @"fechaEntrega" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __fechaEntrega];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fotoPaciente_isset) {
    if (__fotoPaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"fotoPaciente" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __fotoPaciente];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SeRealiza("];
  [ms appendString: @"claveAnalisis:"];
  [ms appendFormat: @"\"%@\"", __claveAnalisis];
  [ms appendString: @",clavePaciente:"];
  [ms appendFormat: @"\"%@\"", __clavePaciente];
  [ms appendString: @",fechaAplic:"];
  [ms appendFormat: @"\"%@\"", __fechaAplic];
  [ms appendString: @",fechaEntrega:"];
  [ms appendFormat: @"\"%@\"", __fechaEntrega];
  [ms appendString: @",fotoPaciente:"];
  [ms appendFormat: @"\"%@\"", __fotoPaciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReporteAnalisisPaciente

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClavePaciente: (NSString *) clavePaciente claveAnalisis: (NSString *) claveAnalisis fechaAplic: (NSString *) fechaAplic nombrePaciente: (NSString *) nombrePaciente fechaEntrega: (NSString *) fechaEntrega tipo: (NSString *) tipo descripcion: (NSString *) descripcion fotoPaciente: (NSString *) fotoPaciente
{
  self = [super init];
  __clavePaciente = [clavePaciente retain_stub];
  __clavePaciente_isset = YES;
  __claveAnalisis = [claveAnalisis retain_stub];
  __claveAnalisis_isset = YES;
  __fechaAplic = [fechaAplic retain_stub];
  __fechaAplic_isset = YES;
  __nombrePaciente = [nombrePaciente retain_stub];
  __nombrePaciente_isset = YES;
  __fechaEntrega = [fechaEntrega retain_stub];
  __fechaEntrega_isset = YES;
  __tipo = [tipo retain_stub];
  __tipo_isset = YES;
  __descripcion = [descripcion retain_stub];
  __descripcion_isset = YES;
  __fotoPaciente = [fotoPaciente retain_stub];
  __fotoPaciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clavePaciente"])
  {
    __clavePaciente = [[decoder decodeObjectForKey: @"clavePaciente"] retain_stub];
    __clavePaciente_isset = YES;
  }
  if ([decoder containsValueForKey: @"claveAnalisis"])
  {
    __claveAnalisis = [[decoder decodeObjectForKey: @"claveAnalisis"] retain_stub];
    __claveAnalisis_isset = YES;
  }
  if ([decoder containsValueForKey: @"fechaAplic"])
  {
    __fechaAplic = [[decoder decodeObjectForKey: @"fechaAplic"] retain_stub];
    __fechaAplic_isset = YES;
  }
  if ([decoder containsValueForKey: @"nombrePaciente"])
  {
    __nombrePaciente = [[decoder decodeObjectForKey: @"nombrePaciente"] retain_stub];
    __nombrePaciente_isset = YES;
  }
  if ([decoder containsValueForKey: @"fechaEntrega"])
  {
    __fechaEntrega = [[decoder decodeObjectForKey: @"fechaEntrega"] retain_stub];
    __fechaEntrega_isset = YES;
  }
  if ([decoder containsValueForKey: @"tipo"])
  {
    __tipo = [[decoder decodeObjectForKey: @"tipo"] retain_stub];
    __tipo_isset = YES;
  }
  if ([decoder containsValueForKey: @"descripcion"])
  {
    __descripcion = [[decoder decodeObjectForKey: @"descripcion"] retain_stub];
    __descripcion_isset = YES;
  }
  if ([decoder containsValueForKey: @"fotoPaciente"])
  {
    __fotoPaciente = [[decoder decodeObjectForKey: @"fotoPaciente"] retain_stub];
    __fotoPaciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clavePaciente_isset)
  {
    [encoder encodeObject: __clavePaciente forKey: @"clavePaciente"];
  }
  if (__claveAnalisis_isset)
  {
    [encoder encodeObject: __claveAnalisis forKey: @"claveAnalisis"];
  }
  if (__fechaAplic_isset)
  {
    [encoder encodeObject: __fechaAplic forKey: @"fechaAplic"];
  }
  if (__nombrePaciente_isset)
  {
    [encoder encodeObject: __nombrePaciente forKey: @"nombrePaciente"];
  }
  if (__fechaEntrega_isset)
  {
    [encoder encodeObject: __fechaEntrega forKey: @"fechaEntrega"];
  }
  if (__tipo_isset)
  {
    [encoder encodeObject: __tipo forKey: @"tipo"];
  }
  if (__descripcion_isset)
  {
    [encoder encodeObject: __descripcion forKey: @"descripcion"];
  }
  if (__fotoPaciente_isset)
  {
    [encoder encodeObject: __fotoPaciente forKey: @"fotoPaciente"];
  }
}

- (void) dealloc
{
  [__clavePaciente release_stub];
  [__claveAnalisis release_stub];
  [__fechaAplic release_stub];
  [__nombrePaciente release_stub];
  [__fechaEntrega release_stub];
  [__tipo release_stub];
  [__descripcion release_stub];
  [__fotoPaciente release_stub];
  [super dealloc_stub];
}

- (NSString *) clavePaciente {
  return [[__clavePaciente retain_stub] autorelease_stub];
}

- (void) setClavePaciente: (NSString *) clavePaciente {
  [clavePaciente retain_stub];
  [__clavePaciente release_stub];
  __clavePaciente = clavePaciente;
  __clavePaciente_isset = YES;
}

- (BOOL) clavePacienteIsSet {
  return __clavePaciente_isset;
}

- (void) unsetClavePaciente {
  [__clavePaciente release_stub];
  __clavePaciente = nil;
  __clavePaciente_isset = NO;
}

- (NSString *) claveAnalisis {
  return [[__claveAnalisis retain_stub] autorelease_stub];
}

- (void) setClaveAnalisis: (NSString *) claveAnalisis {
  [claveAnalisis retain_stub];
  [__claveAnalisis release_stub];
  __claveAnalisis = claveAnalisis;
  __claveAnalisis_isset = YES;
}

- (BOOL) claveAnalisisIsSet {
  return __claveAnalisis_isset;
}

- (void) unsetClaveAnalisis {
  [__claveAnalisis release_stub];
  __claveAnalisis = nil;
  __claveAnalisis_isset = NO;
}

- (NSString *) fechaAplic {
  return [[__fechaAplic retain_stub] autorelease_stub];
}

- (void) setFechaAplic: (NSString *) fechaAplic {
  [fechaAplic retain_stub];
  [__fechaAplic release_stub];
  __fechaAplic = fechaAplic;
  __fechaAplic_isset = YES;
}

- (BOOL) fechaAplicIsSet {
  return __fechaAplic_isset;
}

- (void) unsetFechaAplic {
  [__fechaAplic release_stub];
  __fechaAplic = nil;
  __fechaAplic_isset = NO;
}

- (NSString *) nombrePaciente {
  return [[__nombrePaciente retain_stub] autorelease_stub];
}

- (void) setNombrePaciente: (NSString *) nombrePaciente {
  [nombrePaciente retain_stub];
  [__nombrePaciente release_stub];
  __nombrePaciente = nombrePaciente;
  __nombrePaciente_isset = YES;
}

- (BOOL) nombrePacienteIsSet {
  return __nombrePaciente_isset;
}

- (void) unsetNombrePaciente {
  [__nombrePaciente release_stub];
  __nombrePaciente = nil;
  __nombrePaciente_isset = NO;
}

- (NSString *) fechaEntrega {
  return [[__fechaEntrega retain_stub] autorelease_stub];
}

- (void) setFechaEntrega: (NSString *) fechaEntrega {
  [fechaEntrega retain_stub];
  [__fechaEntrega release_stub];
  __fechaEntrega = fechaEntrega;
  __fechaEntrega_isset = YES;
}

- (BOOL) fechaEntregaIsSet {
  return __fechaEntrega_isset;
}

- (void) unsetFechaEntrega {
  [__fechaEntrega release_stub];
  __fechaEntrega = nil;
  __fechaEntrega_isset = NO;
}

- (NSString *) tipo {
  return [[__tipo retain_stub] autorelease_stub];
}

- (void) setTipo: (NSString *) tipo {
  [tipo retain_stub];
  [__tipo release_stub];
  __tipo = tipo;
  __tipo_isset = YES;
}

- (BOOL) tipoIsSet {
  return __tipo_isset;
}

- (void) unsetTipo {
  [__tipo release_stub];
  __tipo = nil;
  __tipo_isset = NO;
}

- (NSString *) descripcion {
  return [[__descripcion retain_stub] autorelease_stub];
}

- (void) setDescripcion: (NSString *) descripcion {
  [descripcion retain_stub];
  [__descripcion release_stub];
  __descripcion = descripcion;
  __descripcion_isset = YES;
}

- (BOOL) descripcionIsSet {
  return __descripcion_isset;
}

- (void) unsetDescripcion {
  [__descripcion release_stub];
  __descripcion = nil;
  __descripcion_isset = NO;
}

- (NSString *) fotoPaciente {
  return [[__fotoPaciente retain_stub] autorelease_stub];
}

- (void) setFotoPaciente: (NSString *) fotoPaciente {
  [fotoPaciente retain_stub];
  [__fotoPaciente release_stub];
  __fotoPaciente = fotoPaciente;
  __fotoPaciente_isset = YES;
}

- (BOOL) fotoPacienteIsSet {
  return __fotoPaciente_isset;
}

- (void) unsetFotoPaciente {
  [__fotoPaciente release_stub];
  __fotoPaciente = nil;
  __fotoPaciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClavePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaveAnalisis: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFechaAplic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNombrePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFechaEntrega: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTipo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescripcion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFotoPaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReporteAnalisisPaciente"];
  if (__clavePaciente_isset) {
    if (__clavePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clavePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  if (__claveAnalisis_isset) {
    if (__claveAnalisis != nil) {
      [outProtocol writeFieldBeginWithName: @"claveAnalisis" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __claveAnalisis];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fechaAplic_isset) {
    if (__fechaAplic != nil) {
      [outProtocol writeFieldBeginWithName: @"fechaAplic" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __fechaAplic];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nombrePaciente_isset) {
    if (__nombrePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"nombrePaciente" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __nombrePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fechaEntrega_isset) {
    if (__fechaEntrega != nil) {
      [outProtocol writeFieldBeginWithName: @"fechaEntrega" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __fechaEntrega];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tipo_isset) {
    if (__tipo != nil) {
      [outProtocol writeFieldBeginWithName: @"tipo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __tipo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__descripcion_isset) {
    if (__descripcion != nil) {
      [outProtocol writeFieldBeginWithName: @"descripcion" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __descripcion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fotoPaciente_isset) {
    if (__fotoPaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"fotoPaciente" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __fotoPaciente];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReporteAnalisisPaciente("];
  [ms appendString: @"clavePaciente:"];
  [ms appendFormat: @"\"%@\"", __clavePaciente];
  [ms appendString: @",claveAnalisis:"];
  [ms appendFormat: @"\"%@\"", __claveAnalisis];
  [ms appendString: @",fechaAplic:"];
  [ms appendFormat: @"\"%@\"", __fechaAplic];
  [ms appendString: @",nombrePaciente:"];
  [ms appendFormat: @"\"%@\"", __nombrePaciente];
  [ms appendString: @",fechaEntrega:"];
  [ms appendFormat: @"\"%@\"", __fechaEntrega];
  [ms appendString: @",tipo:"];
  [ms appendFormat: @"\"%@\"", __tipo];
  [ms appendString: @",descripcion:"];
  [ms appendFormat: @"\"%@\"", __descripcion];
  [ms appendString: @",fotoPaciente:"];
  [ms appendFormat: @"\"%@\"", __fotoPaciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReporteDoctoresPaciente

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClavePaciente: (NSString *) clavePaciente claveDoctor: (NSString *) claveDoctor nombrePaciente: (NSString *) nombrePaciente nombreDoctor: (NSString *) nombreDoctor tratamiento: (NSString *) tratamiento diagnostico: (NSString *) diagnostico fecha: (NSString *) fecha fotoDoctor: (NSString *) fotoDoctor fotoPaciente: (NSString *) fotoPaciente
{
  self = [super init];
  __clavePaciente = [clavePaciente retain_stub];
  __clavePaciente_isset = YES;
  __claveDoctor = [claveDoctor retain_stub];
  __claveDoctor_isset = YES;
  __nombrePaciente = [nombrePaciente retain_stub];
  __nombrePaciente_isset = YES;
  __nombreDoctor = [nombreDoctor retain_stub];
  __nombreDoctor_isset = YES;
  __tratamiento = [tratamiento retain_stub];
  __tratamiento_isset = YES;
  __diagnostico = [diagnostico retain_stub];
  __diagnostico_isset = YES;
  __fecha = [fecha retain_stub];
  __fecha_isset = YES;
  __fotoDoctor = [fotoDoctor retain_stub];
  __fotoDoctor_isset = YES;
  __fotoPaciente = [fotoPaciente retain_stub];
  __fotoPaciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clavePaciente"])
  {
    __clavePaciente = [[decoder decodeObjectForKey: @"clavePaciente"] retain_stub];
    __clavePaciente_isset = YES;
  }
  if ([decoder containsValueForKey: @"claveDoctor"])
  {
    __claveDoctor = [[decoder decodeObjectForKey: @"claveDoctor"] retain_stub];
    __claveDoctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"nombrePaciente"])
  {
    __nombrePaciente = [[decoder decodeObjectForKey: @"nombrePaciente"] retain_stub];
    __nombrePaciente_isset = YES;
  }
  if ([decoder containsValueForKey: @"nombreDoctor"])
  {
    __nombreDoctor = [[decoder decodeObjectForKey: @"nombreDoctor"] retain_stub];
    __nombreDoctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"tratamiento"])
  {
    __tratamiento = [[decoder decodeObjectForKey: @"tratamiento"] retain_stub];
    __tratamiento_isset = YES;
  }
  if ([decoder containsValueForKey: @"diagnostico"])
  {
    __diagnostico = [[decoder decodeObjectForKey: @"diagnostico"] retain_stub];
    __diagnostico_isset = YES;
  }
  if ([decoder containsValueForKey: @"fecha"])
  {
    __fecha = [[decoder decodeObjectForKey: @"fecha"] retain_stub];
    __fecha_isset = YES;
  }
  if ([decoder containsValueForKey: @"fotoDoctor"])
  {
    __fotoDoctor = [[decoder decodeObjectForKey: @"fotoDoctor"] retain_stub];
    __fotoDoctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"fotoPaciente"])
  {
    __fotoPaciente = [[decoder decodeObjectForKey: @"fotoPaciente"] retain_stub];
    __fotoPaciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clavePaciente_isset)
  {
    [encoder encodeObject: __clavePaciente forKey: @"clavePaciente"];
  }
  if (__claveDoctor_isset)
  {
    [encoder encodeObject: __claveDoctor forKey: @"claveDoctor"];
  }
  if (__nombrePaciente_isset)
  {
    [encoder encodeObject: __nombrePaciente forKey: @"nombrePaciente"];
  }
  if (__nombreDoctor_isset)
  {
    [encoder encodeObject: __nombreDoctor forKey: @"nombreDoctor"];
  }
  if (__tratamiento_isset)
  {
    [encoder encodeObject: __tratamiento forKey: @"tratamiento"];
  }
  if (__diagnostico_isset)
  {
    [encoder encodeObject: __diagnostico forKey: @"diagnostico"];
  }
  if (__fecha_isset)
  {
    [encoder encodeObject: __fecha forKey: @"fecha"];
  }
  if (__fotoDoctor_isset)
  {
    [encoder encodeObject: __fotoDoctor forKey: @"fotoDoctor"];
  }
  if (__fotoPaciente_isset)
  {
    [encoder encodeObject: __fotoPaciente forKey: @"fotoPaciente"];
  }
}

- (void) dealloc
{
  [__clavePaciente release_stub];
  [__claveDoctor release_stub];
  [__nombrePaciente release_stub];
  [__nombreDoctor release_stub];
  [__tratamiento release_stub];
  [__diagnostico release_stub];
  [__fecha release_stub];
  [__fotoDoctor release_stub];
  [__fotoPaciente release_stub];
  [super dealloc_stub];
}

- (NSString *) clavePaciente {
  return [[__clavePaciente retain_stub] autorelease_stub];
}

- (void) setClavePaciente: (NSString *) clavePaciente {
  [clavePaciente retain_stub];
  [__clavePaciente release_stub];
  __clavePaciente = clavePaciente;
  __clavePaciente_isset = YES;
}

- (BOOL) clavePacienteIsSet {
  return __clavePaciente_isset;
}

- (void) unsetClavePaciente {
  [__clavePaciente release_stub];
  __clavePaciente = nil;
  __clavePaciente_isset = NO;
}

- (NSString *) claveDoctor {
  return [[__claveDoctor retain_stub] autorelease_stub];
}

- (void) setClaveDoctor: (NSString *) claveDoctor {
  [claveDoctor retain_stub];
  [__claveDoctor release_stub];
  __claveDoctor = claveDoctor;
  __claveDoctor_isset = YES;
}

- (BOOL) claveDoctorIsSet {
  return __claveDoctor_isset;
}

- (void) unsetClaveDoctor {
  [__claveDoctor release_stub];
  __claveDoctor = nil;
  __claveDoctor_isset = NO;
}

- (NSString *) nombrePaciente {
  return [[__nombrePaciente retain_stub] autorelease_stub];
}

- (void) setNombrePaciente: (NSString *) nombrePaciente {
  [nombrePaciente retain_stub];
  [__nombrePaciente release_stub];
  __nombrePaciente = nombrePaciente;
  __nombrePaciente_isset = YES;
}

- (BOOL) nombrePacienteIsSet {
  return __nombrePaciente_isset;
}

- (void) unsetNombrePaciente {
  [__nombrePaciente release_stub];
  __nombrePaciente = nil;
  __nombrePaciente_isset = NO;
}

- (NSString *) nombreDoctor {
  return [[__nombreDoctor retain_stub] autorelease_stub];
}

- (void) setNombreDoctor: (NSString *) nombreDoctor {
  [nombreDoctor retain_stub];
  [__nombreDoctor release_stub];
  __nombreDoctor = nombreDoctor;
  __nombreDoctor_isset = YES;
}

- (BOOL) nombreDoctorIsSet {
  return __nombreDoctor_isset;
}

- (void) unsetNombreDoctor {
  [__nombreDoctor release_stub];
  __nombreDoctor = nil;
  __nombreDoctor_isset = NO;
}

- (NSString *) tratamiento {
  return [[__tratamiento retain_stub] autorelease_stub];
}

- (void) setTratamiento: (NSString *) tratamiento {
  [tratamiento retain_stub];
  [__tratamiento release_stub];
  __tratamiento = tratamiento;
  __tratamiento_isset = YES;
}

- (BOOL) tratamientoIsSet {
  return __tratamiento_isset;
}

- (void) unsetTratamiento {
  [__tratamiento release_stub];
  __tratamiento = nil;
  __tratamiento_isset = NO;
}

- (NSString *) diagnostico {
  return [[__diagnostico retain_stub] autorelease_stub];
}

- (void) setDiagnostico: (NSString *) diagnostico {
  [diagnostico retain_stub];
  [__diagnostico release_stub];
  __diagnostico = diagnostico;
  __diagnostico_isset = YES;
}

- (BOOL) diagnosticoIsSet {
  return __diagnostico_isset;
}

- (void) unsetDiagnostico {
  [__diagnostico release_stub];
  __diagnostico = nil;
  __diagnostico_isset = NO;
}

- (NSString *) fecha {
  return [[__fecha retain_stub] autorelease_stub];
}

- (void) setFecha: (NSString *) fecha {
  [fecha retain_stub];
  [__fecha release_stub];
  __fecha = fecha;
  __fecha_isset = YES;
}

- (BOOL) fechaIsSet {
  return __fecha_isset;
}

- (void) unsetFecha {
  [__fecha release_stub];
  __fecha = nil;
  __fecha_isset = NO;
}

- (NSString *) fotoDoctor {
  return [[__fotoDoctor retain_stub] autorelease_stub];
}

- (void) setFotoDoctor: (NSString *) fotoDoctor {
  [fotoDoctor retain_stub];
  [__fotoDoctor release_stub];
  __fotoDoctor = fotoDoctor;
  __fotoDoctor_isset = YES;
}

- (BOOL) fotoDoctorIsSet {
  return __fotoDoctor_isset;
}

- (void) unsetFotoDoctor {
  [__fotoDoctor release_stub];
  __fotoDoctor = nil;
  __fotoDoctor_isset = NO;
}

- (NSString *) fotoPaciente {
  return [[__fotoPaciente retain_stub] autorelease_stub];
}

- (void) setFotoPaciente: (NSString *) fotoPaciente {
  [fotoPaciente retain_stub];
  [__fotoPaciente release_stub];
  __fotoPaciente = fotoPaciente;
  __fotoPaciente_isset = YES;
}

- (BOOL) fotoPacienteIsSet {
  return __fotoPaciente_isset;
}

- (void) unsetFotoPaciente {
  [__fotoPaciente release_stub];
  __fotoPaciente = nil;
  __fotoPaciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClavePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaveDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNombrePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNombreDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTratamiento: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiagnostico: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFecha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFotoDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFotoPaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReporteDoctoresPaciente"];
  if (__clavePaciente_isset) {
    if (__clavePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clavePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  if (__claveDoctor_isset) {
    if (__claveDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"claveDoctor" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __claveDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nombrePaciente_isset) {
    if (__nombrePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"nombrePaciente" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __nombrePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nombreDoctor_isset) {
    if (__nombreDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"nombreDoctor" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __nombreDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tratamiento_isset) {
    if (__tratamiento != nil) {
      [outProtocol writeFieldBeginWithName: @"tratamiento" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __tratamiento];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diagnostico_isset) {
    if (__diagnostico != nil) {
      [outProtocol writeFieldBeginWithName: @"diagnostico" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __diagnostico];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fecha_isset) {
    if (__fecha != nil) {
      [outProtocol writeFieldBeginWithName: @"fecha" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __fecha];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fotoDoctor_isset) {
    if (__fotoDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"fotoDoctor" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __fotoDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fotoPaciente_isset) {
    if (__fotoPaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"fotoPaciente" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __fotoPaciente];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReporteDoctoresPaciente("];
  [ms appendString: @"clavePaciente:"];
  [ms appendFormat: @"\"%@\"", __clavePaciente];
  [ms appendString: @",claveDoctor:"];
  [ms appendFormat: @"\"%@\"", __claveDoctor];
  [ms appendString: @",nombrePaciente:"];
  [ms appendFormat: @"\"%@\"", __nombrePaciente];
  [ms appendString: @",nombreDoctor:"];
  [ms appendFormat: @"\"%@\"", __nombreDoctor];
  [ms appendString: @",tratamiento:"];
  [ms appendFormat: @"\"%@\"", __tratamiento];
  [ms appendString: @",diagnostico:"];
  [ms appendFormat: @"\"%@\"", __diagnostico];
  [ms appendString: @",fecha:"];
  [ms appendFormat: @"\"%@\"", __fecha];
  [ms appendString: @",fotoDoctor:"];
  [ms appendFormat: @"\"%@\"", __fotoDoctor];
  [ms appendString: @",fotoPaciente:"];
  [ms appendFormat: @"\"%@\"", __fotoPaciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReportePacientesAnalisis

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClavePaciente: (NSString *) clavePaciente claveAnalisis: (NSString *) claveAnalisis fechaAplic: (NSString *) fechaAplic nombrePaciente: (NSString *) nombrePaciente fechaEntrega: (NSString *) fechaEntrega tipo: (NSString *) tipo descripcion: (NSString *) descripcion fotoPaciente: (NSString *) fotoPaciente
{
  self = [super init];
  __clavePaciente = [clavePaciente retain_stub];
  __clavePaciente_isset = YES;
  __claveAnalisis = [claveAnalisis retain_stub];
  __claveAnalisis_isset = YES;
  __fechaAplic = [fechaAplic retain_stub];
  __fechaAplic_isset = YES;
  __nombrePaciente = [nombrePaciente retain_stub];
  __nombrePaciente_isset = YES;
  __fechaEntrega = [fechaEntrega retain_stub];
  __fechaEntrega_isset = YES;
  __tipo = [tipo retain_stub];
  __tipo_isset = YES;
  __descripcion = [descripcion retain_stub];
  __descripcion_isset = YES;
  __fotoPaciente = [fotoPaciente retain_stub];
  __fotoPaciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clavePaciente"])
  {
    __clavePaciente = [[decoder decodeObjectForKey: @"clavePaciente"] retain_stub];
    __clavePaciente_isset = YES;
  }
  if ([decoder containsValueForKey: @"claveAnalisis"])
  {
    __claveAnalisis = [[decoder decodeObjectForKey: @"claveAnalisis"] retain_stub];
    __claveAnalisis_isset = YES;
  }
  if ([decoder containsValueForKey: @"fechaAplic"])
  {
    __fechaAplic = [[decoder decodeObjectForKey: @"fechaAplic"] retain_stub];
    __fechaAplic_isset = YES;
  }
  if ([decoder containsValueForKey: @"nombrePaciente"])
  {
    __nombrePaciente = [[decoder decodeObjectForKey: @"nombrePaciente"] retain_stub];
    __nombrePaciente_isset = YES;
  }
  if ([decoder containsValueForKey: @"fechaEntrega"])
  {
    __fechaEntrega = [[decoder decodeObjectForKey: @"fechaEntrega"] retain_stub];
    __fechaEntrega_isset = YES;
  }
  if ([decoder containsValueForKey: @"tipo"])
  {
    __tipo = [[decoder decodeObjectForKey: @"tipo"] retain_stub];
    __tipo_isset = YES;
  }
  if ([decoder containsValueForKey: @"descripcion"])
  {
    __descripcion = [[decoder decodeObjectForKey: @"descripcion"] retain_stub];
    __descripcion_isset = YES;
  }
  if ([decoder containsValueForKey: @"fotoPaciente"])
  {
    __fotoPaciente = [[decoder decodeObjectForKey: @"fotoPaciente"] retain_stub];
    __fotoPaciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clavePaciente_isset)
  {
    [encoder encodeObject: __clavePaciente forKey: @"clavePaciente"];
  }
  if (__claveAnalisis_isset)
  {
    [encoder encodeObject: __claveAnalisis forKey: @"claveAnalisis"];
  }
  if (__fechaAplic_isset)
  {
    [encoder encodeObject: __fechaAplic forKey: @"fechaAplic"];
  }
  if (__nombrePaciente_isset)
  {
    [encoder encodeObject: __nombrePaciente forKey: @"nombrePaciente"];
  }
  if (__fechaEntrega_isset)
  {
    [encoder encodeObject: __fechaEntrega forKey: @"fechaEntrega"];
  }
  if (__tipo_isset)
  {
    [encoder encodeObject: __tipo forKey: @"tipo"];
  }
  if (__descripcion_isset)
  {
    [encoder encodeObject: __descripcion forKey: @"descripcion"];
  }
  if (__fotoPaciente_isset)
  {
    [encoder encodeObject: __fotoPaciente forKey: @"fotoPaciente"];
  }
}

- (void) dealloc
{
  [__clavePaciente release_stub];
  [__claveAnalisis release_stub];
  [__fechaAplic release_stub];
  [__nombrePaciente release_stub];
  [__fechaEntrega release_stub];
  [__tipo release_stub];
  [__descripcion release_stub];
  [__fotoPaciente release_stub];
  [super dealloc_stub];
}

- (NSString *) clavePaciente {
  return [[__clavePaciente retain_stub] autorelease_stub];
}

- (void) setClavePaciente: (NSString *) clavePaciente {
  [clavePaciente retain_stub];
  [__clavePaciente release_stub];
  __clavePaciente = clavePaciente;
  __clavePaciente_isset = YES;
}

- (BOOL) clavePacienteIsSet {
  return __clavePaciente_isset;
}

- (void) unsetClavePaciente {
  [__clavePaciente release_stub];
  __clavePaciente = nil;
  __clavePaciente_isset = NO;
}

- (NSString *) claveAnalisis {
  return [[__claveAnalisis retain_stub] autorelease_stub];
}

- (void) setClaveAnalisis: (NSString *) claveAnalisis {
  [claveAnalisis retain_stub];
  [__claveAnalisis release_stub];
  __claveAnalisis = claveAnalisis;
  __claveAnalisis_isset = YES;
}

- (BOOL) claveAnalisisIsSet {
  return __claveAnalisis_isset;
}

- (void) unsetClaveAnalisis {
  [__claveAnalisis release_stub];
  __claveAnalisis = nil;
  __claveAnalisis_isset = NO;
}

- (NSString *) fechaAplic {
  return [[__fechaAplic retain_stub] autorelease_stub];
}

- (void) setFechaAplic: (NSString *) fechaAplic {
  [fechaAplic retain_stub];
  [__fechaAplic release_stub];
  __fechaAplic = fechaAplic;
  __fechaAplic_isset = YES;
}

- (BOOL) fechaAplicIsSet {
  return __fechaAplic_isset;
}

- (void) unsetFechaAplic {
  [__fechaAplic release_stub];
  __fechaAplic = nil;
  __fechaAplic_isset = NO;
}

- (NSString *) nombrePaciente {
  return [[__nombrePaciente retain_stub] autorelease_stub];
}

- (void) setNombrePaciente: (NSString *) nombrePaciente {
  [nombrePaciente retain_stub];
  [__nombrePaciente release_stub];
  __nombrePaciente = nombrePaciente;
  __nombrePaciente_isset = YES;
}

- (BOOL) nombrePacienteIsSet {
  return __nombrePaciente_isset;
}

- (void) unsetNombrePaciente {
  [__nombrePaciente release_stub];
  __nombrePaciente = nil;
  __nombrePaciente_isset = NO;
}

- (NSString *) fechaEntrega {
  return [[__fechaEntrega retain_stub] autorelease_stub];
}

- (void) setFechaEntrega: (NSString *) fechaEntrega {
  [fechaEntrega retain_stub];
  [__fechaEntrega release_stub];
  __fechaEntrega = fechaEntrega;
  __fechaEntrega_isset = YES;
}

- (BOOL) fechaEntregaIsSet {
  return __fechaEntrega_isset;
}

- (void) unsetFechaEntrega {
  [__fechaEntrega release_stub];
  __fechaEntrega = nil;
  __fechaEntrega_isset = NO;
}

- (NSString *) tipo {
  return [[__tipo retain_stub] autorelease_stub];
}

- (void) setTipo: (NSString *) tipo {
  [tipo retain_stub];
  [__tipo release_stub];
  __tipo = tipo;
  __tipo_isset = YES;
}

- (BOOL) tipoIsSet {
  return __tipo_isset;
}

- (void) unsetTipo {
  [__tipo release_stub];
  __tipo = nil;
  __tipo_isset = NO;
}

- (NSString *) descripcion {
  return [[__descripcion retain_stub] autorelease_stub];
}

- (void) setDescripcion: (NSString *) descripcion {
  [descripcion retain_stub];
  [__descripcion release_stub];
  __descripcion = descripcion;
  __descripcion_isset = YES;
}

- (BOOL) descripcionIsSet {
  return __descripcion_isset;
}

- (void) unsetDescripcion {
  [__descripcion release_stub];
  __descripcion = nil;
  __descripcion_isset = NO;
}

- (NSString *) fotoPaciente {
  return [[__fotoPaciente retain_stub] autorelease_stub];
}

- (void) setFotoPaciente: (NSString *) fotoPaciente {
  [fotoPaciente retain_stub];
  [__fotoPaciente release_stub];
  __fotoPaciente = fotoPaciente;
  __fotoPaciente_isset = YES;
}

- (BOOL) fotoPacienteIsSet {
  return __fotoPaciente_isset;
}

- (void) unsetFotoPaciente {
  [__fotoPaciente release_stub];
  __fotoPaciente = nil;
  __fotoPaciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClavePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaveAnalisis: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFechaAplic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNombrePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFechaEntrega: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTipo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescripcion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFotoPaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReportePacientesAnalisis"];
  if (__clavePaciente_isset) {
    if (__clavePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clavePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  if (__claveAnalisis_isset) {
    if (__claveAnalisis != nil) {
      [outProtocol writeFieldBeginWithName: @"claveAnalisis" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __claveAnalisis];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fechaAplic_isset) {
    if (__fechaAplic != nil) {
      [outProtocol writeFieldBeginWithName: @"fechaAplic" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __fechaAplic];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nombrePaciente_isset) {
    if (__nombrePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"nombrePaciente" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __nombrePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fechaEntrega_isset) {
    if (__fechaEntrega != nil) {
      [outProtocol writeFieldBeginWithName: @"fechaEntrega" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __fechaEntrega];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tipo_isset) {
    if (__tipo != nil) {
      [outProtocol writeFieldBeginWithName: @"tipo" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __tipo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__descripcion_isset) {
    if (__descripcion != nil) {
      [outProtocol writeFieldBeginWithName: @"descripcion" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __descripcion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fotoPaciente_isset) {
    if (__fotoPaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"fotoPaciente" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __fotoPaciente];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReportePacientesAnalisis("];
  [ms appendString: @"clavePaciente:"];
  [ms appendFormat: @"\"%@\"", __clavePaciente];
  [ms appendString: @",claveAnalisis:"];
  [ms appendFormat: @"\"%@\"", __claveAnalisis];
  [ms appendString: @",fechaAplic:"];
  [ms appendFormat: @"\"%@\"", __fechaAplic];
  [ms appendString: @",nombrePaciente:"];
  [ms appendFormat: @"\"%@\"", __nombrePaciente];
  [ms appendString: @",fechaEntrega:"];
  [ms appendFormat: @"\"%@\"", __fechaEntrega];
  [ms appendString: @",tipo:"];
  [ms appendFormat: @"\"%@\"", __tipo];
  [ms appendString: @",descripcion:"];
  [ms appendFormat: @"\"%@\"", __descripcion];
  [ms appendString: @",fotoPaciente:"];
  [ms appendFormat: @"\"%@\"", __fotoPaciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReportePacientesDoctor

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClavePaciente: (NSString *) clavePaciente claveDoctor: (NSString *) claveDoctor nombrePaciente: (NSString *) nombrePaciente nombreDoctor: (NSString *) nombreDoctor tratamiento: (NSString *) tratamiento diagnostico: (NSString *) diagnostico fecha: (NSString *) fecha fotoDoctor: (NSString *) fotoDoctor fotoPaciente: (NSString *) fotoPaciente
{
  self = [super init];
  __clavePaciente = [clavePaciente retain_stub];
  __clavePaciente_isset = YES;
  __claveDoctor = [claveDoctor retain_stub];
  __claveDoctor_isset = YES;
  __nombrePaciente = [nombrePaciente retain_stub];
  __nombrePaciente_isset = YES;
  __nombreDoctor = [nombreDoctor retain_stub];
  __nombreDoctor_isset = YES;
  __tratamiento = [tratamiento retain_stub];
  __tratamiento_isset = YES;
  __diagnostico = [diagnostico retain_stub];
  __diagnostico_isset = YES;
  __fecha = [fecha retain_stub];
  __fecha_isset = YES;
  __fotoDoctor = [fotoDoctor retain_stub];
  __fotoDoctor_isset = YES;
  __fotoPaciente = [fotoPaciente retain_stub];
  __fotoPaciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clavePaciente"])
  {
    __clavePaciente = [[decoder decodeObjectForKey: @"clavePaciente"] retain_stub];
    __clavePaciente_isset = YES;
  }
  if ([decoder containsValueForKey: @"claveDoctor"])
  {
    __claveDoctor = [[decoder decodeObjectForKey: @"claveDoctor"] retain_stub];
    __claveDoctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"nombrePaciente"])
  {
    __nombrePaciente = [[decoder decodeObjectForKey: @"nombrePaciente"] retain_stub];
    __nombrePaciente_isset = YES;
  }
  if ([decoder containsValueForKey: @"nombreDoctor"])
  {
    __nombreDoctor = [[decoder decodeObjectForKey: @"nombreDoctor"] retain_stub];
    __nombreDoctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"tratamiento"])
  {
    __tratamiento = [[decoder decodeObjectForKey: @"tratamiento"] retain_stub];
    __tratamiento_isset = YES;
  }
  if ([decoder containsValueForKey: @"diagnostico"])
  {
    __diagnostico = [[decoder decodeObjectForKey: @"diagnostico"] retain_stub];
    __diagnostico_isset = YES;
  }
  if ([decoder containsValueForKey: @"fecha"])
  {
    __fecha = [[decoder decodeObjectForKey: @"fecha"] retain_stub];
    __fecha_isset = YES;
  }
  if ([decoder containsValueForKey: @"fotoDoctor"])
  {
    __fotoDoctor = [[decoder decodeObjectForKey: @"fotoDoctor"] retain_stub];
    __fotoDoctor_isset = YES;
  }
  if ([decoder containsValueForKey: @"fotoPaciente"])
  {
    __fotoPaciente = [[decoder decodeObjectForKey: @"fotoPaciente"] retain_stub];
    __fotoPaciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clavePaciente_isset)
  {
    [encoder encodeObject: __clavePaciente forKey: @"clavePaciente"];
  }
  if (__claveDoctor_isset)
  {
    [encoder encodeObject: __claveDoctor forKey: @"claveDoctor"];
  }
  if (__nombrePaciente_isset)
  {
    [encoder encodeObject: __nombrePaciente forKey: @"nombrePaciente"];
  }
  if (__nombreDoctor_isset)
  {
    [encoder encodeObject: __nombreDoctor forKey: @"nombreDoctor"];
  }
  if (__tratamiento_isset)
  {
    [encoder encodeObject: __tratamiento forKey: @"tratamiento"];
  }
  if (__diagnostico_isset)
  {
    [encoder encodeObject: __diagnostico forKey: @"diagnostico"];
  }
  if (__fecha_isset)
  {
    [encoder encodeObject: __fecha forKey: @"fecha"];
  }
  if (__fotoDoctor_isset)
  {
    [encoder encodeObject: __fotoDoctor forKey: @"fotoDoctor"];
  }
  if (__fotoPaciente_isset)
  {
    [encoder encodeObject: __fotoPaciente forKey: @"fotoPaciente"];
  }
}

- (void) dealloc
{
  [__clavePaciente release_stub];
  [__claveDoctor release_stub];
  [__nombrePaciente release_stub];
  [__nombreDoctor release_stub];
  [__tratamiento release_stub];
  [__diagnostico release_stub];
  [__fecha release_stub];
  [__fotoDoctor release_stub];
  [__fotoPaciente release_stub];
  [super dealloc_stub];
}

- (NSString *) clavePaciente {
  return [[__clavePaciente retain_stub] autorelease_stub];
}

- (void) setClavePaciente: (NSString *) clavePaciente {
  [clavePaciente retain_stub];
  [__clavePaciente release_stub];
  __clavePaciente = clavePaciente;
  __clavePaciente_isset = YES;
}

- (BOOL) clavePacienteIsSet {
  return __clavePaciente_isset;
}

- (void) unsetClavePaciente {
  [__clavePaciente release_stub];
  __clavePaciente = nil;
  __clavePaciente_isset = NO;
}

- (NSString *) claveDoctor {
  return [[__claveDoctor retain_stub] autorelease_stub];
}

- (void) setClaveDoctor: (NSString *) claveDoctor {
  [claveDoctor retain_stub];
  [__claveDoctor release_stub];
  __claveDoctor = claveDoctor;
  __claveDoctor_isset = YES;
}

- (BOOL) claveDoctorIsSet {
  return __claveDoctor_isset;
}

- (void) unsetClaveDoctor {
  [__claveDoctor release_stub];
  __claveDoctor = nil;
  __claveDoctor_isset = NO;
}

- (NSString *) nombrePaciente {
  return [[__nombrePaciente retain_stub] autorelease_stub];
}

- (void) setNombrePaciente: (NSString *) nombrePaciente {
  [nombrePaciente retain_stub];
  [__nombrePaciente release_stub];
  __nombrePaciente = nombrePaciente;
  __nombrePaciente_isset = YES;
}

- (BOOL) nombrePacienteIsSet {
  return __nombrePaciente_isset;
}

- (void) unsetNombrePaciente {
  [__nombrePaciente release_stub];
  __nombrePaciente = nil;
  __nombrePaciente_isset = NO;
}

- (NSString *) nombreDoctor {
  return [[__nombreDoctor retain_stub] autorelease_stub];
}

- (void) setNombreDoctor: (NSString *) nombreDoctor {
  [nombreDoctor retain_stub];
  [__nombreDoctor release_stub];
  __nombreDoctor = nombreDoctor;
  __nombreDoctor_isset = YES;
}

- (BOOL) nombreDoctorIsSet {
  return __nombreDoctor_isset;
}

- (void) unsetNombreDoctor {
  [__nombreDoctor release_stub];
  __nombreDoctor = nil;
  __nombreDoctor_isset = NO;
}

- (NSString *) tratamiento {
  return [[__tratamiento retain_stub] autorelease_stub];
}

- (void) setTratamiento: (NSString *) tratamiento {
  [tratamiento retain_stub];
  [__tratamiento release_stub];
  __tratamiento = tratamiento;
  __tratamiento_isset = YES;
}

- (BOOL) tratamientoIsSet {
  return __tratamiento_isset;
}

- (void) unsetTratamiento {
  [__tratamiento release_stub];
  __tratamiento = nil;
  __tratamiento_isset = NO;
}

- (NSString *) diagnostico {
  return [[__diagnostico retain_stub] autorelease_stub];
}

- (void) setDiagnostico: (NSString *) diagnostico {
  [diagnostico retain_stub];
  [__diagnostico release_stub];
  __diagnostico = diagnostico;
  __diagnostico_isset = YES;
}

- (BOOL) diagnosticoIsSet {
  return __diagnostico_isset;
}

- (void) unsetDiagnostico {
  [__diagnostico release_stub];
  __diagnostico = nil;
  __diagnostico_isset = NO;
}

- (NSString *) fecha {
  return [[__fecha retain_stub] autorelease_stub];
}

- (void) setFecha: (NSString *) fecha {
  [fecha retain_stub];
  [__fecha release_stub];
  __fecha = fecha;
  __fecha_isset = YES;
}

- (BOOL) fechaIsSet {
  return __fecha_isset;
}

- (void) unsetFecha {
  [__fecha release_stub];
  __fecha = nil;
  __fecha_isset = NO;
}

- (NSString *) fotoDoctor {
  return [[__fotoDoctor retain_stub] autorelease_stub];
}

- (void) setFotoDoctor: (NSString *) fotoDoctor {
  [fotoDoctor retain_stub];
  [__fotoDoctor release_stub];
  __fotoDoctor = fotoDoctor;
  __fotoDoctor_isset = YES;
}

- (BOOL) fotoDoctorIsSet {
  return __fotoDoctor_isset;
}

- (void) unsetFotoDoctor {
  [__fotoDoctor release_stub];
  __fotoDoctor = nil;
  __fotoDoctor_isset = NO;
}

- (NSString *) fotoPaciente {
  return [[__fotoPaciente retain_stub] autorelease_stub];
}

- (void) setFotoPaciente: (NSString *) fotoPaciente {
  [fotoPaciente retain_stub];
  [__fotoPaciente release_stub];
  __fotoPaciente = fotoPaciente;
  __fotoPaciente_isset = YES;
}

- (BOOL) fotoPacienteIsSet {
  return __fotoPaciente_isset;
}

- (void) unsetFotoPaciente {
  [__fotoPaciente release_stub];
  __fotoPaciente = nil;
  __fotoPaciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClavePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaveDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNombrePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNombreDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTratamiento: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDiagnostico: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFecha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFotoDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFotoPaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReportePacientesDoctor"];
  if (__clavePaciente_isset) {
    if (__clavePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clavePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  if (__claveDoctor_isset) {
    if (__claveDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"claveDoctor" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __claveDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nombrePaciente_isset) {
    if (__nombrePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"nombrePaciente" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __nombrePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nombreDoctor_isset) {
    if (__nombreDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"nombreDoctor" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __nombreDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tratamiento_isset) {
    if (__tratamiento != nil) {
      [outProtocol writeFieldBeginWithName: @"tratamiento" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __tratamiento];
      [outProtocol writeFieldEnd];
    }
  }
  if (__diagnostico_isset) {
    if (__diagnostico != nil) {
      [outProtocol writeFieldBeginWithName: @"diagnostico" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __diagnostico];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fecha_isset) {
    if (__fecha != nil) {
      [outProtocol writeFieldBeginWithName: @"fecha" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __fecha];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fotoDoctor_isset) {
    if (__fotoDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"fotoDoctor" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __fotoDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fotoPaciente_isset) {
    if (__fotoPaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"fotoPaciente" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __fotoPaciente];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReportePacientesDoctor("];
  [ms appendString: @"clavePaciente:"];
  [ms appendFormat: @"\"%@\"", __clavePaciente];
  [ms appendString: @",claveDoctor:"];
  [ms appendFormat: @"\"%@\"", __claveDoctor];
  [ms appendString: @",nombrePaciente:"];
  [ms appendFormat: @"\"%@\"", __nombrePaciente];
  [ms appendString: @",nombreDoctor:"];
  [ms appendFormat: @"\"%@\"", __nombreDoctor];
  [ms appendString: @",tratamiento:"];
  [ms appendFormat: @"\"%@\"", __tratamiento];
  [ms appendString: @",diagnostico:"];
  [ms appendFormat: @"\"%@\"", __diagnostico];
  [ms appendString: @",fecha:"];
  [ms appendFormat: @"\"%@\"", __fecha];
  [ms appendString: @",fotoDoctor:"];
  [ms appendFormat: @"\"%@\"", __fotoDoctor];
  [ms appendString: @",fotoPaciente:"];
  [ms appendFormat: @"\"%@\"", __fotoPaciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation actionsConstants
+ (void) initialize {
}
@end

@interface actualizarAnalisis_args : NSObject <TBase, NSCoding> {
  AnalisisClinico * __analisis;

  BOOL __analisis_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=analisis, setter=setAnalisis:) AnalisisClinico * analisis;
#endif

- (id) init;
- (id) initWithAnalisis: (AnalisisClinico *) analisis;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AnalisisClinico *) analisis;
- (void) setAnalisis: (AnalisisClinico *) analisis;
#endif
- (BOOL) analisisIsSet;

@end

@implementation actualizarAnalisis_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAnalisis: (AnalisisClinico *) analisis
{
  self = [super init];
  __analisis = [analisis retain_stub];
  __analisis_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"analisis"])
  {
    __analisis = [[decoder decodeObjectForKey: @"analisis"] retain_stub];
    __analisis_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__analisis_isset)
  {
    [encoder encodeObject: __analisis forKey: @"analisis"];
  }
}

- (void) dealloc
{
  [__analisis release_stub];
  [super dealloc_stub];
}

- (AnalisisClinico *) analisis {
  return [[__analisis retain_stub] autorelease_stub];
}

- (void) setAnalisis: (AnalisisClinico *) analisis {
  [analisis retain_stub];
  [__analisis release_stub];
  __analisis = analisis;
  __analisis_isset = YES;
}

- (BOOL) analisisIsSet {
  return __analisis_isset;
}

- (void) unsetAnalisis {
  [__analisis release_stub];
  __analisis = nil;
  __analisis_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AnalisisClinico *fieldValue = [[AnalisisClinico alloc] init];
          [fieldValue read: inProtocol];
          [self setAnalisis: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"actualizarAnalisis_args"];
  if (__analisis_isset) {
    if (__analisis != nil) {
      [outProtocol writeFieldBeginWithName: @"analisis" type: TType_STRUCT fieldID: 1];
      [__analisis write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"actualizarAnalisis_args("];
  [ms appendString: @"analisis:"];
  [ms appendFormat: @"%@", __analisis];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ActualizarAnalisis_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ActualizarAnalisis_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActualizarAnalisis_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActualizarAnalisis_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface actualizarDoctor_args : NSObject <TBase, NSCoding> {
  Doctor * __doctor;

  BOOL __doctor_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=doctor, setter=setDoctor:) Doctor * doctor;
#endif

- (id) init;
- (id) initWithDoctor: (Doctor *) doctor;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Doctor *) doctor;
- (void) setDoctor: (Doctor *) doctor;
#endif
- (BOOL) doctorIsSet;

@end

@implementation actualizarDoctor_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDoctor: (Doctor *) doctor
{
  self = [super init];
  __doctor = [doctor retain_stub];
  __doctor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"doctor"])
  {
    __doctor = [[decoder decodeObjectForKey: @"doctor"] retain_stub];
    __doctor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__doctor_isset)
  {
    [encoder encodeObject: __doctor forKey: @"doctor"];
  }
}

- (void) dealloc
{
  [__doctor release_stub];
  [super dealloc_stub];
}

- (Doctor *) doctor {
  return [[__doctor retain_stub] autorelease_stub];
}

- (void) setDoctor: (Doctor *) doctor {
  [doctor retain_stub];
  [__doctor release_stub];
  __doctor = doctor;
  __doctor_isset = YES;
}

- (BOOL) doctorIsSet {
  return __doctor_isset;
}

- (void) unsetDoctor {
  [__doctor release_stub];
  __doctor = nil;
  __doctor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Doctor *fieldValue = [[Doctor alloc] init];
          [fieldValue read: inProtocol];
          [self setDoctor: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"actualizarDoctor_args"];
  if (__doctor_isset) {
    if (__doctor != nil) {
      [outProtocol writeFieldBeginWithName: @"doctor" type: TType_STRUCT fieldID: 1];
      [__doctor write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"actualizarDoctor_args("];
  [ms appendString: @"doctor:"];
  [ms appendFormat: @"%@", __doctor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ActualizarDoctor_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ActualizarDoctor_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActualizarDoctor_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActualizarDoctor_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface actualizarPaciente_args : NSObject <TBase, NSCoding> {
  Paciente * __paciente;

  BOOL __paciente_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=paciente, setter=setPaciente:) Paciente * paciente;
#endif

- (id) init;
- (id) initWithPaciente: (Paciente *) paciente;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Paciente *) paciente;
- (void) setPaciente: (Paciente *) paciente;
#endif
- (BOOL) pacienteIsSet;

@end

@implementation actualizarPaciente_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPaciente: (Paciente *) paciente
{
  self = [super init];
  __paciente = [paciente retain_stub];
  __paciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"paciente"])
  {
    __paciente = [[decoder decodeObjectForKey: @"paciente"] retain_stub];
    __paciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__paciente_isset)
  {
    [encoder encodeObject: __paciente forKey: @"paciente"];
  }
}

- (void) dealloc
{
  [__paciente release_stub];
  [super dealloc_stub];
}

- (Paciente *) paciente {
  return [[__paciente retain_stub] autorelease_stub];
}

- (void) setPaciente: (Paciente *) paciente {
  [paciente retain_stub];
  [__paciente release_stub];
  __paciente = paciente;
  __paciente_isset = YES;
}

- (BOOL) pacienteIsSet {
  return __paciente_isset;
}

- (void) unsetPaciente {
  [__paciente release_stub];
  __paciente = nil;
  __paciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Paciente *fieldValue = [[Paciente alloc] init];
          [fieldValue read: inProtocol];
          [self setPaciente: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"actualizarPaciente_args"];
  if (__paciente_isset) {
    if (__paciente != nil) {
      [outProtocol writeFieldBeginWithName: @"paciente" type: TType_STRUCT fieldID: 1];
      [__paciente write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"actualizarPaciente_args("];
  [ms appendString: @"paciente:"];
  [ms appendFormat: @"%@", __paciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ActualizarPaciente_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ActualizarPaciente_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ActualizarPaciente_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ActualizarPaciente_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface borrarAnalisis_args : NSObject <TBase, NSCoding> {
  NSString * __claveAnalisis;

  BOOL __claveAnalisis_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=claveAnalisis, setter=setClaveAnalisis:) NSString * claveAnalisis;
#endif

- (id) init;
- (id) initWithClaveAnalisis: (NSString *) claveAnalisis;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) claveAnalisis;
- (void) setClaveAnalisis: (NSString *) claveAnalisis;
#endif
- (BOOL) claveAnalisisIsSet;

@end

@implementation borrarAnalisis_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClaveAnalisis: (NSString *) claveAnalisis
{
  self = [super init];
  __claveAnalisis = [claveAnalisis retain_stub];
  __claveAnalisis_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"claveAnalisis"])
  {
    __claveAnalisis = [[decoder decodeObjectForKey: @"claveAnalisis"] retain_stub];
    __claveAnalisis_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__claveAnalisis_isset)
  {
    [encoder encodeObject: __claveAnalisis forKey: @"claveAnalisis"];
  }
}

- (void) dealloc
{
  [__claveAnalisis release_stub];
  [super dealloc_stub];
}

- (NSString *) claveAnalisis {
  return [[__claveAnalisis retain_stub] autorelease_stub];
}

- (void) setClaveAnalisis: (NSString *) claveAnalisis {
  [claveAnalisis retain_stub];
  [__claveAnalisis release_stub];
  __claveAnalisis = claveAnalisis;
  __claveAnalisis_isset = YES;
}

- (BOOL) claveAnalisisIsSet {
  return __claveAnalisis_isset;
}

- (void) unsetClaveAnalisis {
  [__claveAnalisis release_stub];
  __claveAnalisis = nil;
  __claveAnalisis_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaveAnalisis: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"borrarAnalisis_args"];
  if (__claveAnalisis_isset) {
    if (__claveAnalisis != nil) {
      [outProtocol writeFieldBeginWithName: @"claveAnalisis" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __claveAnalisis];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"borrarAnalisis_args("];
  [ms appendString: @"claveAnalisis:"];
  [ms appendFormat: @"\"%@\"", __claveAnalisis];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BorrarAnalisis_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation BorrarAnalisis_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BorrarAnalisis_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BorrarAnalisis_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface borrarDoctor_args : NSObject <TBase, NSCoding> {
  NSString * __claveDoctor;

  BOOL __claveDoctor_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=claveDoctor, setter=setClaveDoctor:) NSString * claveDoctor;
#endif

- (id) init;
- (id) initWithClaveDoctor: (NSString *) claveDoctor;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) claveDoctor;
- (void) setClaveDoctor: (NSString *) claveDoctor;
#endif
- (BOOL) claveDoctorIsSet;

@end

@implementation borrarDoctor_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClaveDoctor: (NSString *) claveDoctor
{
  self = [super init];
  __claveDoctor = [claveDoctor retain_stub];
  __claveDoctor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"claveDoctor"])
  {
    __claveDoctor = [[decoder decodeObjectForKey: @"claveDoctor"] retain_stub];
    __claveDoctor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__claveDoctor_isset)
  {
    [encoder encodeObject: __claveDoctor forKey: @"claveDoctor"];
  }
}

- (void) dealloc
{
  [__claveDoctor release_stub];
  [super dealloc_stub];
}

- (NSString *) claveDoctor {
  return [[__claveDoctor retain_stub] autorelease_stub];
}

- (void) setClaveDoctor: (NSString *) claveDoctor {
  [claveDoctor retain_stub];
  [__claveDoctor release_stub];
  __claveDoctor = claveDoctor;
  __claveDoctor_isset = YES;
}

- (BOOL) claveDoctorIsSet {
  return __claveDoctor_isset;
}

- (void) unsetClaveDoctor {
  [__claveDoctor release_stub];
  __claveDoctor = nil;
  __claveDoctor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaveDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"borrarDoctor_args"];
  if (__claveDoctor_isset) {
    if (__claveDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"claveDoctor" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __claveDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"borrarDoctor_args("];
  [ms appendString: @"claveDoctor:"];
  [ms appendFormat: @"\"%@\"", __claveDoctor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BorrarDoctor_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation BorrarDoctor_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BorrarDoctor_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BorrarDoctor_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface borrarPaciente_args : NSObject <TBase, NSCoding> {
  NSString * __clavePaciente;

  BOOL __clavePaciente_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=clavePaciente, setter=setClavePaciente:) NSString * clavePaciente;
#endif

- (id) init;
- (id) initWithClavePaciente: (NSString *) clavePaciente;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) clavePaciente;
- (void) setClavePaciente: (NSString *) clavePaciente;
#endif
- (BOOL) clavePacienteIsSet;

@end

@implementation borrarPaciente_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClavePaciente: (NSString *) clavePaciente
{
  self = [super init];
  __clavePaciente = [clavePaciente retain_stub];
  __clavePaciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clavePaciente"])
  {
    __clavePaciente = [[decoder decodeObjectForKey: @"clavePaciente"] retain_stub];
    __clavePaciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clavePaciente_isset)
  {
    [encoder encodeObject: __clavePaciente forKey: @"clavePaciente"];
  }
}

- (void) dealloc
{
  [__clavePaciente release_stub];
  [super dealloc_stub];
}

- (NSString *) clavePaciente {
  return [[__clavePaciente retain_stub] autorelease_stub];
}

- (void) setClavePaciente: (NSString *) clavePaciente {
  [clavePaciente retain_stub];
  [__clavePaciente release_stub];
  __clavePaciente = clavePaciente;
  __clavePaciente_isset = YES;
}

- (BOOL) clavePacienteIsSet {
  return __clavePaciente_isset;
}

- (void) unsetClavePaciente {
  [__clavePaciente release_stub];
  __clavePaciente = nil;
  __clavePaciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClavePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"borrarPaciente_args"];
  if (__clavePaciente_isset) {
    if (__clavePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clavePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"borrarPaciente_args("];
  [ms appendString: @"clavePaciente:"];
  [ms appendFormat: @"\"%@\"", __clavePaciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BorrarPaciente_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation BorrarPaciente_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BorrarPaciente_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BorrarPaciente_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface capturarAnalisis_args : NSObject <TBase, NSCoding> {
  AnalisisClinico * __analisis;

  BOOL __analisis_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=analisis, setter=setAnalisis:) AnalisisClinico * analisis;
#endif

- (id) init;
- (id) initWithAnalisis: (AnalisisClinico *) analisis;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AnalisisClinico *) analisis;
- (void) setAnalisis: (AnalisisClinico *) analisis;
#endif
- (BOOL) analisisIsSet;

@end

@implementation capturarAnalisis_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAnalisis: (AnalisisClinico *) analisis
{
  self = [super init];
  __analisis = [analisis retain_stub];
  __analisis_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"analisis"])
  {
    __analisis = [[decoder decodeObjectForKey: @"analisis"] retain_stub];
    __analisis_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__analisis_isset)
  {
    [encoder encodeObject: __analisis forKey: @"analisis"];
  }
}

- (void) dealloc
{
  [__analisis release_stub];
  [super dealloc_stub];
}

- (AnalisisClinico *) analisis {
  return [[__analisis retain_stub] autorelease_stub];
}

- (void) setAnalisis: (AnalisisClinico *) analisis {
  [analisis retain_stub];
  [__analisis release_stub];
  __analisis = analisis;
  __analisis_isset = YES;
}

- (BOOL) analisisIsSet {
  return __analisis_isset;
}

- (void) unsetAnalisis {
  [__analisis release_stub];
  __analisis = nil;
  __analisis_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AnalisisClinico *fieldValue = [[AnalisisClinico alloc] init];
          [fieldValue read: inProtocol];
          [self setAnalisis: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"capturarAnalisis_args"];
  if (__analisis_isset) {
    if (__analisis != nil) {
      [outProtocol writeFieldBeginWithName: @"analisis" type: TType_STRUCT fieldID: 1];
      [__analisis write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"capturarAnalisis_args("];
  [ms appendString: @"analisis:"];
  [ms appendFormat: @"%@", __analisis];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CapturarAnalisis_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CapturarAnalisis_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CapturarAnalisis_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CapturarAnalisis_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface capturarDoctor_args : NSObject <TBase, NSCoding> {
  Doctor * __doctor;

  BOOL __doctor_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=doctor, setter=setDoctor:) Doctor * doctor;
#endif

- (id) init;
- (id) initWithDoctor: (Doctor *) doctor;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Doctor *) doctor;
- (void) setDoctor: (Doctor *) doctor;
#endif
- (BOOL) doctorIsSet;

@end

@implementation capturarDoctor_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDoctor: (Doctor *) doctor
{
  self = [super init];
  __doctor = [doctor retain_stub];
  __doctor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"doctor"])
  {
    __doctor = [[decoder decodeObjectForKey: @"doctor"] retain_stub];
    __doctor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__doctor_isset)
  {
    [encoder encodeObject: __doctor forKey: @"doctor"];
  }
}

- (void) dealloc
{
  [__doctor release_stub];
  [super dealloc_stub];
}

- (Doctor *) doctor {
  return [[__doctor retain_stub] autorelease_stub];
}

- (void) setDoctor: (Doctor *) doctor {
  [doctor retain_stub];
  [__doctor release_stub];
  __doctor = doctor;
  __doctor_isset = YES;
}

- (BOOL) doctorIsSet {
  return __doctor_isset;
}

- (void) unsetDoctor {
  [__doctor release_stub];
  __doctor = nil;
  __doctor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Doctor *fieldValue = [[Doctor alloc] init];
          [fieldValue read: inProtocol];
          [self setDoctor: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"capturarDoctor_args"];
  if (__doctor_isset) {
    if (__doctor != nil) {
      [outProtocol writeFieldBeginWithName: @"doctor" type: TType_STRUCT fieldID: 1];
      [__doctor write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"capturarDoctor_args("];
  [ms appendString: @"doctor:"];
  [ms appendFormat: @"%@", __doctor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CapturarDoctor_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CapturarDoctor_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CapturarDoctor_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CapturarDoctor_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface capturarPaciente_args : NSObject <TBase, NSCoding> {
  Paciente * __paciente;

  BOOL __paciente_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=paciente, setter=setPaciente:) Paciente * paciente;
#endif

- (id) init;
- (id) initWithPaciente: (Paciente *) paciente;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Paciente *) paciente;
- (void) setPaciente: (Paciente *) paciente;
#endif
- (BOOL) pacienteIsSet;

@end

@implementation capturarPaciente_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPaciente: (Paciente *) paciente
{
  self = [super init];
  __paciente = [paciente retain_stub];
  __paciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"paciente"])
  {
    __paciente = [[decoder decodeObjectForKey: @"paciente"] retain_stub];
    __paciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__paciente_isset)
  {
    [encoder encodeObject: __paciente forKey: @"paciente"];
  }
}

- (void) dealloc
{
  [__paciente release_stub];
  [super dealloc_stub];
}

- (Paciente *) paciente {
  return [[__paciente retain_stub] autorelease_stub];
}

- (void) setPaciente: (Paciente *) paciente {
  [paciente retain_stub];
  [__paciente release_stub];
  __paciente = paciente;
  __paciente_isset = YES;
}

- (BOOL) pacienteIsSet {
  return __paciente_isset;
}

- (void) unsetPaciente {
  [__paciente release_stub];
  __paciente = nil;
  __paciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Paciente *fieldValue = [[Paciente alloc] init];
          [fieldValue read: inProtocol];
          [self setPaciente: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"capturarPaciente_args"];
  if (__paciente_isset) {
    if (__paciente != nil) {
      [outProtocol writeFieldBeginWithName: @"paciente" type: TType_STRUCT fieldID: 1];
      [__paciente write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"capturarPaciente_args("];
  [ms appendString: @"paciente:"];
  [ms appendFormat: @"%@", __paciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CapturarPaciente_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CapturarPaciente_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CapturarPaciente_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CapturarPaciente_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface capturarAtiende_args : NSObject <TBase, NSCoding> {
  Atiende * __atiende;

  BOOL __atiende_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=atiende, setter=setAtiende:) Atiende * atiende;
#endif

- (id) init;
- (id) initWithAtiende: (Atiende *) atiende;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Atiende *) atiende;
- (void) setAtiende: (Atiende *) atiende;
#endif
- (BOOL) atiendeIsSet;

@end

@implementation capturarAtiende_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAtiende: (Atiende *) atiende
{
  self = [super init];
  __atiende = [atiende retain_stub];
  __atiende_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"atiende"])
  {
    __atiende = [[decoder decodeObjectForKey: @"atiende"] retain_stub];
    __atiende_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__atiende_isset)
  {
    [encoder encodeObject: __atiende forKey: @"atiende"];
  }
}

- (void) dealloc
{
  [__atiende release_stub];
  [super dealloc_stub];
}

- (Atiende *) atiende {
  return [[__atiende retain_stub] autorelease_stub];
}

- (void) setAtiende: (Atiende *) atiende {
  [atiende retain_stub];
  [__atiende release_stub];
  __atiende = atiende;
  __atiende_isset = YES;
}

- (BOOL) atiendeIsSet {
  return __atiende_isset;
}

- (void) unsetAtiende {
  [__atiende release_stub];
  __atiende = nil;
  __atiende_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Atiende *fieldValue = [[Atiende alloc] init];
          [fieldValue read: inProtocol];
          [self setAtiende: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"capturarAtiende_args"];
  if (__atiende_isset) {
    if (__atiende != nil) {
      [outProtocol writeFieldBeginWithName: @"atiende" type: TType_STRUCT fieldID: 1];
      [__atiende write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"capturarAtiende_args("];
  [ms appendString: @"atiende:"];
  [ms appendFormat: @"%@", __atiende];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CapturarAtiende_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CapturarAtiende_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CapturarAtiende_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CapturarAtiende_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface capturarSeRealiza_args : NSObject <TBase, NSCoding> {
  SeRealiza * __seRealiza;

  BOOL __seRealiza_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=seRealiza, setter=setSeRealiza:) SeRealiza * seRealiza;
#endif

- (id) init;
- (id) initWithSeRealiza: (SeRealiza *) seRealiza;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SeRealiza *) seRealiza;
- (void) setSeRealiza: (SeRealiza *) seRealiza;
#endif
- (BOOL) seRealizaIsSet;

@end

@implementation capturarSeRealiza_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSeRealiza: (SeRealiza *) seRealiza
{
  self = [super init];
  __seRealiza = [seRealiza retain_stub];
  __seRealiza_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"seRealiza"])
  {
    __seRealiza = [[decoder decodeObjectForKey: @"seRealiza"] retain_stub];
    __seRealiza_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__seRealiza_isset)
  {
    [encoder encodeObject: __seRealiza forKey: @"seRealiza"];
  }
}

- (void) dealloc
{
  [__seRealiza release_stub];
  [super dealloc_stub];
}

- (SeRealiza *) seRealiza {
  return [[__seRealiza retain_stub] autorelease_stub];
}

- (void) setSeRealiza: (SeRealiza *) seRealiza {
  [seRealiza retain_stub];
  [__seRealiza release_stub];
  __seRealiza = seRealiza;
  __seRealiza_isset = YES;
}

- (BOOL) seRealizaIsSet {
  return __seRealiza_isset;
}

- (void) unsetSeRealiza {
  [__seRealiza release_stub];
  __seRealiza = nil;
  __seRealiza_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SeRealiza *fieldValue = [[SeRealiza alloc] init];
          [fieldValue read: inProtocol];
          [self setSeRealiza: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"capturarSeRealiza_args"];
  if (__seRealiza_isset) {
    if (__seRealiza != nil) {
      [outProtocol writeFieldBeginWithName: @"seRealiza" type: TType_STRUCT fieldID: 1];
      [__seRealiza write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"capturarSeRealiza_args("];
  [ms appendString: @"seRealiza:"];
  [ms appendFormat: @"%@", __seRealiza];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CapturarSeRealiza_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CapturarSeRealiza_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CapturarSeRealiza_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CapturarSeRealiza_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface consultarAnalisis_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation consultarAnalisis_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"consultarAnalisis_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"consultarAnalisis_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConsultarAnalisis_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConsultarAnalisis_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            AnalisisClinico *_elem2 = [[AnalisisClinico alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultarAnalisis_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i4;
        for (i4 = 0; i4 < [__success count]; i4++)
        {
          [[__success objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConsultarAnalisis_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface consultarAtiende_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation consultarAtiende_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"consultarAtiende_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"consultarAtiende_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConsultarAtiende_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConsultarAtiende_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Atiende *_elem7 = [[Atiende alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultarAtiende_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [[__success objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConsultarAtiende_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface consultarDoctores_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation consultarDoctores_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"consultarDoctores_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"consultarDoctores_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConsultarDoctores_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConsultarDoctores_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            Doctor *_elem12 = [[Doctor alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultarDoctores_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i14;
        for (i14 = 0; i14 < [__success count]; i14++)
        {
          [[__success objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConsultarDoctores_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface consultarPacientes_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation consultarPacientes_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"consultarPacientes_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"consultarPacientes_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConsultarPacientes_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConsultarPacientes_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            Paciente *_elem17 = [[Paciente alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultarPacientes_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i19;
        for (i19 = 0; i19 < [__success count]; i19++)
        {
          [[__success objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConsultarPacientes_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface consultarSeRealiza_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation consultarSeRealiza_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"consultarSeRealiza_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"consultarSeRealiza_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConsultarSeRealiza_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConsultarSeRealiza_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            SeRealiza *_elem22 = [[SeRealiza alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultarSeRealiza_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i24;
        for (i24 = 0; i24 < [__success count]; i24++)
        {
          [[__success objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConsultarSeRealiza_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface consultarAnalisisClave_args : NSObject <TBase, NSCoding> {
  NSString * __clave;

  BOOL __clave_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=clave, setter=setClave:) NSString * clave;
#endif

- (id) init;
- (id) initWithClave: (NSString *) clave;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) clave;
- (void) setClave: (NSString *) clave;
#endif
- (BOOL) claveIsSet;

@end

@implementation consultarAnalisisClave_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClave: (NSString *) clave
{
  self = [super init];
  __clave = [clave retain_stub];
  __clave_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clave"])
  {
    __clave = [[decoder decodeObjectForKey: @"clave"] retain_stub];
    __clave_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clave_isset)
  {
    [encoder encodeObject: __clave forKey: @"clave"];
  }
}

- (void) dealloc
{
  [__clave release_stub];
  [super dealloc_stub];
}

- (NSString *) clave {
  return [[__clave retain_stub] autorelease_stub];
}

- (void) setClave: (NSString *) clave {
  [clave retain_stub];
  [__clave release_stub];
  __clave = clave;
  __clave_isset = YES;
}

- (BOOL) claveIsSet {
  return __clave_isset;
}

- (void) unsetClave {
  [__clave release_stub];
  __clave = nil;
  __clave_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClave: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"consultarAnalisisClave_args"];
  if (__clave_isset) {
    if (__clave != nil) {
      [outProtocol writeFieldBeginWithName: @"clave" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clave];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"consultarAnalisisClave_args("];
  [ms appendString: @"clave:"];
  [ms appendFormat: @"\"%@\"", __clave];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConsultarAnalisisClave_result : NSObject <TBase, NSCoding> {
  AnalisisClinico * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AnalisisClinico * success;
#endif

- (id) init;
- (id) initWithSuccess: (AnalisisClinico *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AnalisisClinico *) success;
- (void) setSuccess: (AnalisisClinico *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConsultarAnalisisClave_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AnalisisClinico *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (AnalisisClinico *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AnalisisClinico *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AnalisisClinico *fieldValue = [[AnalisisClinico alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultarAnalisisClave_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConsultarAnalisisClave_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface consultarPacienteClave_args : NSObject <TBase, NSCoding> {
  NSString * __clave;

  BOOL __clave_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=clave, setter=setClave:) NSString * clave;
#endif

- (id) init;
- (id) initWithClave: (NSString *) clave;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) clave;
- (void) setClave: (NSString *) clave;
#endif
- (BOOL) claveIsSet;

@end

@implementation consultarPacienteClave_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClave: (NSString *) clave
{
  self = [super init];
  __clave = [clave retain_stub];
  __clave_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clave"])
  {
    __clave = [[decoder decodeObjectForKey: @"clave"] retain_stub];
    __clave_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clave_isset)
  {
    [encoder encodeObject: __clave forKey: @"clave"];
  }
}

- (void) dealloc
{
  [__clave release_stub];
  [super dealloc_stub];
}

- (NSString *) clave {
  return [[__clave retain_stub] autorelease_stub];
}

- (void) setClave: (NSString *) clave {
  [clave retain_stub];
  [__clave release_stub];
  __clave = clave;
  __clave_isset = YES;
}

- (BOOL) claveIsSet {
  return __clave_isset;
}

- (void) unsetClave {
  [__clave release_stub];
  __clave = nil;
  __clave_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClave: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"consultarPacienteClave_args"];
  if (__clave_isset) {
    if (__clave != nil) {
      [outProtocol writeFieldBeginWithName: @"clave" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clave];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"consultarPacienteClave_args("];
  [ms appendString: @"clave:"];
  [ms appendFormat: @"\"%@\"", __clave];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConsultarPacienteClave_result : NSObject <TBase, NSCoding> {
  Paciente * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Paciente * success;
#endif

- (id) init;
- (id) initWithSuccess: (Paciente *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Paciente *) success;
- (void) setSuccess: (Paciente *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConsultarPacienteClave_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Paciente *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Paciente *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Paciente *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Paciente *fieldValue = [[Paciente alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultarPacienteClave_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConsultarPacienteClave_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface consultarDoctorClave_args : NSObject <TBase, NSCoding> {
  NSString * __clave;

  BOOL __clave_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=clave, setter=setClave:) NSString * clave;
#endif

- (id) init;
- (id) initWithClave: (NSString *) clave;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) clave;
- (void) setClave: (NSString *) clave;
#endif
- (BOOL) claveIsSet;

@end

@implementation consultarDoctorClave_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClave: (NSString *) clave
{
  self = [super init];
  __clave = [clave retain_stub];
  __clave_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clave"])
  {
    __clave = [[decoder decodeObjectForKey: @"clave"] retain_stub];
    __clave_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clave_isset)
  {
    [encoder encodeObject: __clave forKey: @"clave"];
  }
}

- (void) dealloc
{
  [__clave release_stub];
  [super dealloc_stub];
}

- (NSString *) clave {
  return [[__clave retain_stub] autorelease_stub];
}

- (void) setClave: (NSString *) clave {
  [clave retain_stub];
  [__clave release_stub];
  __clave = clave;
  __clave_isset = YES;
}

- (BOOL) claveIsSet {
  return __clave_isset;
}

- (void) unsetClave {
  [__clave release_stub];
  __clave = nil;
  __clave_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClave: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"consultarDoctorClave_args"];
  if (__clave_isset) {
    if (__clave != nil) {
      [outProtocol writeFieldBeginWithName: @"clave" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clave];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"consultarDoctorClave_args("];
  [ms appendString: @"clave:"];
  [ms appendFormat: @"\"%@\"", __clave];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConsultarDoctorClave_result : NSObject <TBase, NSCoding> {
  Doctor * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Doctor * success;
#endif

- (id) init;
- (id) initWithSuccess: (Doctor *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Doctor *) success;
- (void) setSuccess: (Doctor *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConsultarDoctorClave_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Doctor *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Doctor *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Doctor *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Doctor *fieldValue = [[Doctor alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultarDoctorClave_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConsultarDoctorClave_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface consultarAnalisisTipo_args : NSObject <TBase, NSCoding> {
  NSString * __tipo;

  BOOL __tipo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=tipo, setter=setTipo:) NSString * tipo;
#endif

- (id) init;
- (id) initWithTipo: (NSString *) tipo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) tipo;
- (void) setTipo: (NSString *) tipo;
#endif
- (BOOL) tipoIsSet;

@end

@implementation consultarAnalisisTipo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTipo: (NSString *) tipo
{
  self = [super init];
  __tipo = [tipo retain_stub];
  __tipo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tipo"])
  {
    __tipo = [[decoder decodeObjectForKey: @"tipo"] retain_stub];
    __tipo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tipo_isset)
  {
    [encoder encodeObject: __tipo forKey: @"tipo"];
  }
}

- (void) dealloc
{
  [__tipo release_stub];
  [super dealloc_stub];
}

- (NSString *) tipo {
  return [[__tipo retain_stub] autorelease_stub];
}

- (void) setTipo: (NSString *) tipo {
  [tipo retain_stub];
  [__tipo release_stub];
  __tipo = tipo;
  __tipo_isset = YES;
}

- (BOOL) tipoIsSet {
  return __tipo_isset;
}

- (void) unsetTipo {
  [__tipo release_stub];
  __tipo = nil;
  __tipo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTipo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"consultarAnalisisTipo_args"];
  if (__tipo_isset) {
    if (__tipo != nil) {
      [outProtocol writeFieldBeginWithName: @"tipo" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __tipo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"consultarAnalisisTipo_args("];
  [ms appendString: @"tipo:"];
  [ms appendFormat: @"\"%@\"", __tipo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConsultarAnalisisTipo_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConsultarAnalisisTipo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            AnalisisClinico *_elem27 = [[AnalisisClinico alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultarAnalisisTipo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i29;
        for (i29 = 0; i29 < [__success count]; i29++)
        {
          [[__success objectAtIndex: i29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConsultarAnalisisTipo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface consultarDoctoresEspecialidad_args : NSObject <TBase, NSCoding> {
  NSString * __especialidad;

  BOOL __especialidad_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=especialidad, setter=setEspecialidad:) NSString * especialidad;
#endif

- (id) init;
- (id) initWithEspecialidad: (NSString *) especialidad;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) especialidad;
- (void) setEspecialidad: (NSString *) especialidad;
#endif
- (BOOL) especialidadIsSet;

@end

@implementation consultarDoctoresEspecialidad_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEspecialidad: (NSString *) especialidad
{
  self = [super init];
  __especialidad = [especialidad retain_stub];
  __especialidad_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"especialidad"])
  {
    __especialidad = [[decoder decodeObjectForKey: @"especialidad"] retain_stub];
    __especialidad_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__especialidad_isset)
  {
    [encoder encodeObject: __especialidad forKey: @"especialidad"];
  }
}

- (void) dealloc
{
  [__especialidad release_stub];
  [super dealloc_stub];
}

- (NSString *) especialidad {
  return [[__especialidad retain_stub] autorelease_stub];
}

- (void) setEspecialidad: (NSString *) especialidad {
  [especialidad retain_stub];
  [__especialidad release_stub];
  __especialidad = especialidad;
  __especialidad_isset = YES;
}

- (BOOL) especialidadIsSet {
  return __especialidad_isset;
}

- (void) unsetEspecialidad {
  [__especialidad release_stub];
  __especialidad = nil;
  __especialidad_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEspecialidad: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"consultarDoctoresEspecialidad_args"];
  if (__especialidad_isset) {
    if (__especialidad != nil) {
      [outProtocol writeFieldBeginWithName: @"especialidad" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __especialidad];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"consultarDoctoresEspecialidad_args("];
  [ms appendString: @"especialidad:"];
  [ms appendFormat: @"\"%@\"", __especialidad];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ConsultarDoctoresEspecialidad_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConsultarDoctoresEspecialidad_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            Doctor *_elem32 = [[Doctor alloc] init];
            [_elem32 read: inProtocol];
            [fieldValue addObject: _elem32];
            [_elem32 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ConsultarDoctoresEspecialidad_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i34;
        for (i34 = 0; i34 < [__success count]; i34++)
        {
          [[__success objectAtIndex: i34] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ConsultarDoctoresEspecialidad_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface generarReporteAnalisisPaciente_args : NSObject <TBase, NSCoding> {
  NSString * __clavePaciente;

  BOOL __clavePaciente_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=clavePaciente, setter=setClavePaciente:) NSString * clavePaciente;
#endif

- (id) init;
- (id) initWithClavePaciente: (NSString *) clavePaciente;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) clavePaciente;
- (void) setClavePaciente: (NSString *) clavePaciente;
#endif
- (BOOL) clavePacienteIsSet;

@end

@implementation generarReporteAnalisisPaciente_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClavePaciente: (NSString *) clavePaciente
{
  self = [super init];
  __clavePaciente = [clavePaciente retain_stub];
  __clavePaciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clavePaciente"])
  {
    __clavePaciente = [[decoder decodeObjectForKey: @"clavePaciente"] retain_stub];
    __clavePaciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clavePaciente_isset)
  {
    [encoder encodeObject: __clavePaciente forKey: @"clavePaciente"];
  }
}

- (void) dealloc
{
  [__clavePaciente release_stub];
  [super dealloc_stub];
}

- (NSString *) clavePaciente {
  return [[__clavePaciente retain_stub] autorelease_stub];
}

- (void) setClavePaciente: (NSString *) clavePaciente {
  [clavePaciente retain_stub];
  [__clavePaciente release_stub];
  __clavePaciente = clavePaciente;
  __clavePaciente_isset = YES;
}

- (BOOL) clavePacienteIsSet {
  return __clavePaciente_isset;
}

- (void) unsetClavePaciente {
  [__clavePaciente release_stub];
  __clavePaciente = nil;
  __clavePaciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClavePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"generarReporteAnalisisPaciente_args"];
  if (__clavePaciente_isset) {
    if (__clavePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clavePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"generarReporteAnalisisPaciente_args("];
  [ms appendString: @"clavePaciente:"];
  [ms appendFormat: @"\"%@\"", __clavePaciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GenerarReporteAnalisisPaciente_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GenerarReporteAnalisisPaciente_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            ReporteAnalisisPaciente *_elem37 = [[ReporteAnalisisPaciente alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GenerarReporteAnalisisPaciente_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i39;
        for (i39 = 0; i39 < [__success count]; i39++)
        {
          [[__success objectAtIndex: i39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GenerarReporteAnalisisPaciente_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface generarReportePacientesAnalisis_args : NSObject <TBase, NSCoding> {
  NSString * __claveAnalisis;

  BOOL __claveAnalisis_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=claveAnalisis, setter=setClaveAnalisis:) NSString * claveAnalisis;
#endif

- (id) init;
- (id) initWithClaveAnalisis: (NSString *) claveAnalisis;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) claveAnalisis;
- (void) setClaveAnalisis: (NSString *) claveAnalisis;
#endif
- (BOOL) claveAnalisisIsSet;

@end

@implementation generarReportePacientesAnalisis_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClaveAnalisis: (NSString *) claveAnalisis
{
  self = [super init];
  __claveAnalisis = [claveAnalisis retain_stub];
  __claveAnalisis_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"claveAnalisis"])
  {
    __claveAnalisis = [[decoder decodeObjectForKey: @"claveAnalisis"] retain_stub];
    __claveAnalisis_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__claveAnalisis_isset)
  {
    [encoder encodeObject: __claveAnalisis forKey: @"claveAnalisis"];
  }
}

- (void) dealloc
{
  [__claveAnalisis release_stub];
  [super dealloc_stub];
}

- (NSString *) claveAnalisis {
  return [[__claveAnalisis retain_stub] autorelease_stub];
}

- (void) setClaveAnalisis: (NSString *) claveAnalisis {
  [claveAnalisis retain_stub];
  [__claveAnalisis release_stub];
  __claveAnalisis = claveAnalisis;
  __claveAnalisis_isset = YES;
}

- (BOOL) claveAnalisisIsSet {
  return __claveAnalisis_isset;
}

- (void) unsetClaveAnalisis {
  [__claveAnalisis release_stub];
  __claveAnalisis = nil;
  __claveAnalisis_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaveAnalisis: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"generarReportePacientesAnalisis_args"];
  if (__claveAnalisis_isset) {
    if (__claveAnalisis != nil) {
      [outProtocol writeFieldBeginWithName: @"claveAnalisis" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __claveAnalisis];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"generarReportePacientesAnalisis_args("];
  [ms appendString: @"claveAnalisis:"];
  [ms appendFormat: @"\"%@\"", __claveAnalisis];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GenerarReportePacientesAnalisis_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GenerarReportePacientesAnalisis_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            ReportePacientesAnalisis *_elem42 = [[ReportePacientesAnalisis alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GenerarReportePacientesAnalisis_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i44;
        for (i44 = 0; i44 < [__success count]; i44++)
        {
          [[__success objectAtIndex: i44] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GenerarReportePacientesAnalisis_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface generarReporteDoctoresPaciente_args : NSObject <TBase, NSCoding> {
  NSString * __clavePaciente;

  BOOL __clavePaciente_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=clavePaciente, setter=setClavePaciente:) NSString * clavePaciente;
#endif

- (id) init;
- (id) initWithClavePaciente: (NSString *) clavePaciente;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) clavePaciente;
- (void) setClavePaciente: (NSString *) clavePaciente;
#endif
- (BOOL) clavePacienteIsSet;

@end

@implementation generarReporteDoctoresPaciente_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClavePaciente: (NSString *) clavePaciente
{
  self = [super init];
  __clavePaciente = [clavePaciente retain_stub];
  __clavePaciente_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clavePaciente"])
  {
    __clavePaciente = [[decoder decodeObjectForKey: @"clavePaciente"] retain_stub];
    __clavePaciente_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clavePaciente_isset)
  {
    [encoder encodeObject: __clavePaciente forKey: @"clavePaciente"];
  }
}

- (void) dealloc
{
  [__clavePaciente release_stub];
  [super dealloc_stub];
}

- (NSString *) clavePaciente {
  return [[__clavePaciente retain_stub] autorelease_stub];
}

- (void) setClavePaciente: (NSString *) clavePaciente {
  [clavePaciente retain_stub];
  [__clavePaciente release_stub];
  __clavePaciente = clavePaciente;
  __clavePaciente_isset = YES;
}

- (BOOL) clavePacienteIsSet {
  return __clavePaciente_isset;
}

- (void) unsetClavePaciente {
  [__clavePaciente release_stub];
  __clavePaciente = nil;
  __clavePaciente_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClavePaciente: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"generarReporteDoctoresPaciente_args"];
  if (__clavePaciente_isset) {
    if (__clavePaciente != nil) {
      [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __clavePaciente];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"generarReporteDoctoresPaciente_args("];
  [ms appendString: @"clavePaciente:"];
  [ms appendFormat: @"\"%@\"", __clavePaciente];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GenerarReporteDoctoresPaciente_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GenerarReporteDoctoresPaciente_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size45;
          [inProtocol readListBeginReturningElementType: NULL size: &_size45];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
          int _i46;
          for (_i46 = 0; _i46 < _size45; ++_i46)
          {
            ReporteDoctoresPaciente *_elem47 = [[ReporteDoctoresPaciente alloc] init];
            [_elem47 read: inProtocol];
            [fieldValue addObject: _elem47];
            [_elem47 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GenerarReporteDoctoresPaciente_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i49;
        for (i49 = 0; i49 < [__success count]; i49++)
        {
          [[__success objectAtIndex: i49] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GenerarReporteDoctoresPaciente_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface generarReportePacientesDoctor_args : NSObject <TBase, NSCoding> {
  NSString * __claveDoctor;

  BOOL __claveDoctor_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=claveDoctor, setter=setClaveDoctor:) NSString * claveDoctor;
#endif

- (id) init;
- (id) initWithClaveDoctor: (NSString *) claveDoctor;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) claveDoctor;
- (void) setClaveDoctor: (NSString *) claveDoctor;
#endif
- (BOOL) claveDoctorIsSet;

@end

@implementation generarReportePacientesDoctor_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClaveDoctor: (NSString *) claveDoctor
{
  self = [super init];
  __claveDoctor = [claveDoctor retain_stub];
  __claveDoctor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"claveDoctor"])
  {
    __claveDoctor = [[decoder decodeObjectForKey: @"claveDoctor"] retain_stub];
    __claveDoctor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__claveDoctor_isset)
  {
    [encoder encodeObject: __claveDoctor forKey: @"claveDoctor"];
  }
}

- (void) dealloc
{
  [__claveDoctor release_stub];
  [super dealloc_stub];
}

- (NSString *) claveDoctor {
  return [[__claveDoctor retain_stub] autorelease_stub];
}

- (void) setClaveDoctor: (NSString *) claveDoctor {
  [claveDoctor retain_stub];
  [__claveDoctor release_stub];
  __claveDoctor = claveDoctor;
  __claveDoctor_isset = YES;
}

- (BOOL) claveDoctorIsSet {
  return __claveDoctor_isset;
}

- (void) unsetClaveDoctor {
  [__claveDoctor release_stub];
  __claveDoctor = nil;
  __claveDoctor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClaveDoctor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"generarReportePacientesDoctor_args"];
  if (__claveDoctor_isset) {
    if (__claveDoctor != nil) {
      [outProtocol writeFieldBeginWithName: @"claveDoctor" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __claveDoctor];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"generarReportePacientesDoctor_args("];
  [ms appendString: @"claveDoctor:"];
  [ms appendFormat: @"\"%@\"", __claveDoctor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GenerarReportePacientesDoctor_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GenerarReportePacientesDoctor_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size50;
          [inProtocol readListBeginReturningElementType: NULL size: &_size50];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            ReportePacientesDoctor *_elem52 = [[ReportePacientesDoctor alloc] init];
            [_elem52 read: inProtocol];
            [fieldValue addObject: _elem52];
            [_elem52 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GenerarReportePacientesDoctor_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i54;
        for (i54 = 0; i54 < [__success count]; i54++)
        {
          [[__success objectAtIndex: i54] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GenerarReportePacientesDoctor_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ActionsClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_actualizarAnalisis: (AnalisisClinico *) analisis
{
  [outProtocol writeMessageBeginWithName: @"actualizarAnalisis" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"actualizarAnalisis_args"];
  if (analisis != nil)  {
    [outProtocol writeFieldBeginWithName: @"analisis" type: TType_STRUCT fieldID: 1];
    [analisis write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_actualizarAnalisis
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ActualizarAnalisis_result * result = [[[ActualizarAnalisis_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"actualizarAnalisis failed: unknown result"];
}

- (BOOL) actualizarAnalisis: (AnalisisClinico *) analisis
{
  [self send_actualizarAnalisis : analisis];
  return [self recv_actualizarAnalisis];
}

- (void) send_actualizarDoctor: (Doctor *) doctor
{
  [outProtocol writeMessageBeginWithName: @"actualizarDoctor" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"actualizarDoctor_args"];
  if (doctor != nil)  {
    [outProtocol writeFieldBeginWithName: @"doctor" type: TType_STRUCT fieldID: 1];
    [doctor write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_actualizarDoctor
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ActualizarDoctor_result * result = [[[ActualizarDoctor_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"actualizarDoctor failed: unknown result"];
}

- (BOOL) actualizarDoctor: (Doctor *) doctor
{
  [self send_actualizarDoctor : doctor];
  return [self recv_actualizarDoctor];
}

- (void) send_actualizarPaciente: (Paciente *) paciente
{
  [outProtocol writeMessageBeginWithName: @"actualizarPaciente" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"actualizarPaciente_args"];
  if (paciente != nil)  {
    [outProtocol writeFieldBeginWithName: @"paciente" type: TType_STRUCT fieldID: 1];
    [paciente write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_actualizarPaciente
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ActualizarPaciente_result * result = [[[ActualizarPaciente_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"actualizarPaciente failed: unknown result"];
}

- (BOOL) actualizarPaciente: (Paciente *) paciente
{
  [self send_actualizarPaciente : paciente];
  return [self recv_actualizarPaciente];
}

- (void) send_borrarAnalisis: (NSString *) claveAnalisis
{
  [outProtocol writeMessageBeginWithName: @"borrarAnalisis" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"borrarAnalisis_args"];
  if (claveAnalisis != nil)  {
    [outProtocol writeFieldBeginWithName: @"claveAnalisis" type: TType_STRING fieldID: 1];
    [outProtocol writeString: claveAnalisis];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_borrarAnalisis
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  BorrarAnalisis_result * result = [[[BorrarAnalisis_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"borrarAnalisis failed: unknown result"];
}

- (BOOL) borrarAnalisis: (NSString *) claveAnalisis
{
  [self send_borrarAnalisis : claveAnalisis];
  return [self recv_borrarAnalisis];
}

- (void) send_borrarDoctor: (NSString *) claveDoctor
{
  [outProtocol writeMessageBeginWithName: @"borrarDoctor" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"borrarDoctor_args"];
  if (claveDoctor != nil)  {
    [outProtocol writeFieldBeginWithName: @"claveDoctor" type: TType_STRING fieldID: 1];
    [outProtocol writeString: claveDoctor];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_borrarDoctor
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  BorrarDoctor_result * result = [[[BorrarDoctor_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"borrarDoctor failed: unknown result"];
}

- (BOOL) borrarDoctor: (NSString *) claveDoctor
{
  [self send_borrarDoctor : claveDoctor];
  return [self recv_borrarDoctor];
}

- (void) send_borrarPaciente: (NSString *) clavePaciente
{
  [outProtocol writeMessageBeginWithName: @"borrarPaciente" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"borrarPaciente_args"];
  if (clavePaciente != nil)  {
    [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 1];
    [outProtocol writeString: clavePaciente];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_borrarPaciente
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  BorrarPaciente_result * result = [[[BorrarPaciente_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"borrarPaciente failed: unknown result"];
}

- (BOOL) borrarPaciente: (NSString *) clavePaciente
{
  [self send_borrarPaciente : clavePaciente];
  return [self recv_borrarPaciente];
}

- (void) send_capturarAnalisis: (AnalisisClinico *) analisis
{
  [outProtocol writeMessageBeginWithName: @"capturarAnalisis" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"capturarAnalisis_args"];
  if (analisis != nil)  {
    [outProtocol writeFieldBeginWithName: @"analisis" type: TType_STRUCT fieldID: 1];
    [analisis write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_capturarAnalisis
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  CapturarAnalisis_result * result = [[[CapturarAnalisis_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"capturarAnalisis failed: unknown result"];
}

- (BOOL) capturarAnalisis: (AnalisisClinico *) analisis
{
  [self send_capturarAnalisis : analisis];
  return [self recv_capturarAnalisis];
}

- (void) send_capturarDoctor: (Doctor *) doctor
{
  [outProtocol writeMessageBeginWithName: @"capturarDoctor" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"capturarDoctor_args"];
  if (doctor != nil)  {
    [outProtocol writeFieldBeginWithName: @"doctor" type: TType_STRUCT fieldID: 1];
    [doctor write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_capturarDoctor
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  CapturarDoctor_result * result = [[[CapturarDoctor_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"capturarDoctor failed: unknown result"];
}

- (BOOL) capturarDoctor: (Doctor *) doctor
{
  [self send_capturarDoctor : doctor];
  return [self recv_capturarDoctor];
}

- (void) send_capturarPaciente: (Paciente *) paciente
{
  [outProtocol writeMessageBeginWithName: @"capturarPaciente" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"capturarPaciente_args"];
  if (paciente != nil)  {
    [outProtocol writeFieldBeginWithName: @"paciente" type: TType_STRUCT fieldID: 1];
    [paciente write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_capturarPaciente
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  CapturarPaciente_result * result = [[[CapturarPaciente_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"capturarPaciente failed: unknown result"];
}

- (BOOL) capturarPaciente: (Paciente *) paciente
{
  [self send_capturarPaciente : paciente];
  return [self recv_capturarPaciente];
}

- (void) send_capturarAtiende: (Atiende *) atiende
{
  [outProtocol writeMessageBeginWithName: @"capturarAtiende" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"capturarAtiende_args"];
  if (atiende != nil)  {
    [outProtocol writeFieldBeginWithName: @"atiende" type: TType_STRUCT fieldID: 1];
    [atiende write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_capturarAtiende
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  CapturarAtiende_result * result = [[[CapturarAtiende_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"capturarAtiende failed: unknown result"];
}

- (BOOL) capturarAtiende: (Atiende *) atiende
{
  [self send_capturarAtiende : atiende];
  return [self recv_capturarAtiende];
}

- (void) send_capturarSeRealiza: (SeRealiza *) seRealiza
{
  [outProtocol writeMessageBeginWithName: @"capturarSeRealiza" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"capturarSeRealiza_args"];
  if (seRealiza != nil)  {
    [outProtocol writeFieldBeginWithName: @"seRealiza" type: TType_STRUCT fieldID: 1];
    [seRealiza write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_capturarSeRealiza
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  CapturarSeRealiza_result * result = [[[CapturarSeRealiza_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"capturarSeRealiza failed: unknown result"];
}

- (BOOL) capturarSeRealiza: (SeRealiza *) seRealiza
{
  [self send_capturarSeRealiza : seRealiza];
  return [self recv_capturarSeRealiza];
}

- (void) send_consultarAnalisis
{
  [outProtocol writeMessageBeginWithName: @"consultarAnalisis" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"consultarAnalisis_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_consultarAnalisis
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConsultarAnalisis_result * result = [[[ConsultarAnalisis_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"consultarAnalisis failed: unknown result"];
}

- (NSMutableArray *) consultarAnalisis
{
  [self send_consultarAnalisis];
  return [self recv_consultarAnalisis];
}

- (void) send_consultarAtiende
{
  [outProtocol writeMessageBeginWithName: @"consultarAtiende" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"consultarAtiende_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_consultarAtiende
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConsultarAtiende_result * result = [[[ConsultarAtiende_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"consultarAtiende failed: unknown result"];
}

- (NSMutableArray *) consultarAtiende
{
  [self send_consultarAtiende];
  return [self recv_consultarAtiende];
}

- (void) send_consultarDoctores
{
  [outProtocol writeMessageBeginWithName: @"consultarDoctores" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"consultarDoctores_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_consultarDoctores
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConsultarDoctores_result * result = [[[ConsultarDoctores_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"consultarDoctores failed: unknown result"];
}

- (NSMutableArray *) consultarDoctores
{
  [self send_consultarDoctores];
  return [self recv_consultarDoctores];
}

- (void) send_consultarPacientes
{
  [outProtocol writeMessageBeginWithName: @"consultarPacientes" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"consultarPacientes_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_consultarPacientes
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConsultarPacientes_result * result = [[[ConsultarPacientes_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"consultarPacientes failed: unknown result"];
}

- (NSMutableArray *) consultarPacientes
{
  [self send_consultarPacientes];
  return [self recv_consultarPacientes];
}

- (void) send_consultarSeRealiza
{
  [outProtocol writeMessageBeginWithName: @"consultarSeRealiza" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"consultarSeRealiza_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_consultarSeRealiza
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConsultarSeRealiza_result * result = [[[ConsultarSeRealiza_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"consultarSeRealiza failed: unknown result"];
}

- (NSMutableArray *) consultarSeRealiza
{
  [self send_consultarSeRealiza];
  return [self recv_consultarSeRealiza];
}

- (void) send_consultarAnalisisClave: (NSString *) clave
{
  [outProtocol writeMessageBeginWithName: @"consultarAnalisisClave" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"consultarAnalisisClave_args"];
  if (clave != nil)  {
    [outProtocol writeFieldBeginWithName: @"clave" type: TType_STRING fieldID: 1];
    [outProtocol writeString: clave];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AnalisisClinico *) recv_consultarAnalisisClave
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConsultarAnalisisClave_result * result = [[[ConsultarAnalisisClave_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"consultarAnalisisClave failed: unknown result"];
}

- (AnalisisClinico *) consultarAnalisisClave: (NSString *) clave
{
  [self send_consultarAnalisisClave : clave];
  return [self recv_consultarAnalisisClave];
}

- (void) send_consultarPacienteClave: (NSString *) clave
{
  [outProtocol writeMessageBeginWithName: @"consultarPacienteClave" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"consultarPacienteClave_args"];
  if (clave != nil)  {
    [outProtocol writeFieldBeginWithName: @"clave" type: TType_STRING fieldID: 1];
    [outProtocol writeString: clave];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Paciente *) recv_consultarPacienteClave
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConsultarPacienteClave_result * result = [[[ConsultarPacienteClave_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"consultarPacienteClave failed: unknown result"];
}

- (Paciente *) consultarPacienteClave: (NSString *) clave
{
  [self send_consultarPacienteClave : clave];
  return [self recv_consultarPacienteClave];
}

- (void) send_consultarDoctorClave: (NSString *) clave
{
  [outProtocol writeMessageBeginWithName: @"consultarDoctorClave" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"consultarDoctorClave_args"];
  if (clave != nil)  {
    [outProtocol writeFieldBeginWithName: @"clave" type: TType_STRING fieldID: 1];
    [outProtocol writeString: clave];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Doctor *) recv_consultarDoctorClave
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConsultarDoctorClave_result * result = [[[ConsultarDoctorClave_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"consultarDoctorClave failed: unknown result"];
}

- (Doctor *) consultarDoctorClave: (NSString *) clave
{
  [self send_consultarDoctorClave : clave];
  return [self recv_consultarDoctorClave];
}

- (void) send_consultarAnalisisTipo: (NSString *) tipo
{
  [outProtocol writeMessageBeginWithName: @"consultarAnalisisTipo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"consultarAnalisisTipo_args"];
  if (tipo != nil)  {
    [outProtocol writeFieldBeginWithName: @"tipo" type: TType_STRING fieldID: 1];
    [outProtocol writeString: tipo];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_consultarAnalisisTipo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConsultarAnalisisTipo_result * result = [[[ConsultarAnalisisTipo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"consultarAnalisisTipo failed: unknown result"];
}

- (NSMutableArray *) consultarAnalisisTipo: (NSString *) tipo
{
  [self send_consultarAnalisisTipo : tipo];
  return [self recv_consultarAnalisisTipo];
}

- (void) send_consultarDoctoresEspecialidad: (NSString *) especialidad
{
  [outProtocol writeMessageBeginWithName: @"consultarDoctoresEspecialidad" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"consultarDoctoresEspecialidad_args"];
  if (especialidad != nil)  {
    [outProtocol writeFieldBeginWithName: @"especialidad" type: TType_STRING fieldID: 1];
    [outProtocol writeString: especialidad];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_consultarDoctoresEspecialidad
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ConsultarDoctoresEspecialidad_result * result = [[[ConsultarDoctoresEspecialidad_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"consultarDoctoresEspecialidad failed: unknown result"];
}

- (NSMutableArray *) consultarDoctoresEspecialidad: (NSString *) especialidad
{
  [self send_consultarDoctoresEspecialidad : especialidad];
  return [self recv_consultarDoctoresEspecialidad];
}

- (void) send_generarReporteAnalisisPaciente: (NSString *) clavePaciente
{
  [outProtocol writeMessageBeginWithName: @"generarReporteAnalisisPaciente" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"generarReporteAnalisisPaciente_args"];
  if (clavePaciente != nil)  {
    [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 1];
    [outProtocol writeString: clavePaciente];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_generarReporteAnalisisPaciente
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GenerarReporteAnalisisPaciente_result * result = [[[GenerarReporteAnalisisPaciente_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"generarReporteAnalisisPaciente failed: unknown result"];
}

- (NSMutableArray *) generarReporteAnalisisPaciente: (NSString *) clavePaciente
{
  [self send_generarReporteAnalisisPaciente : clavePaciente];
  return [self recv_generarReporteAnalisisPaciente];
}

- (void) send_generarReportePacientesAnalisis: (NSString *) claveAnalisis
{
  [outProtocol writeMessageBeginWithName: @"generarReportePacientesAnalisis" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"generarReportePacientesAnalisis_args"];
  if (claveAnalisis != nil)  {
    [outProtocol writeFieldBeginWithName: @"claveAnalisis" type: TType_STRING fieldID: 1];
    [outProtocol writeString: claveAnalisis];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_generarReportePacientesAnalisis
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GenerarReportePacientesAnalisis_result * result = [[[GenerarReportePacientesAnalisis_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"generarReportePacientesAnalisis failed: unknown result"];
}

- (NSMutableArray *) generarReportePacientesAnalisis: (NSString *) claveAnalisis
{
  [self send_generarReportePacientesAnalisis : claveAnalisis];
  return [self recv_generarReportePacientesAnalisis];
}

- (void) send_generarReporteDoctoresPaciente: (NSString *) clavePaciente
{
  [outProtocol writeMessageBeginWithName: @"generarReporteDoctoresPaciente" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"generarReporteDoctoresPaciente_args"];
  if (clavePaciente != nil)  {
    [outProtocol writeFieldBeginWithName: @"clavePaciente" type: TType_STRING fieldID: 1];
    [outProtocol writeString: clavePaciente];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_generarReporteDoctoresPaciente
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GenerarReporteDoctoresPaciente_result * result = [[[GenerarReporteDoctoresPaciente_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"generarReporteDoctoresPaciente failed: unknown result"];
}

- (NSMutableArray *) generarReporteDoctoresPaciente: (NSString *) clavePaciente
{
  [self send_generarReporteDoctoresPaciente : clavePaciente];
  return [self recv_generarReporteDoctoresPaciente];
}

- (void) send_generarReportePacientesDoctor: (NSString *) claveDoctor
{
  [outProtocol writeMessageBeginWithName: @"generarReportePacientesDoctor" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"generarReportePacientesDoctor_args"];
  if (claveDoctor != nil)  {
    [outProtocol writeFieldBeginWithName: @"claveDoctor" type: TType_STRING fieldID: 1];
    [outProtocol writeString: claveDoctor];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_generarReportePacientesDoctor
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GenerarReportePacientesDoctor_result * result = [[[GenerarReportePacientesDoctor_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"generarReportePacientesDoctor failed: unknown result"];
}

- (NSMutableArray *) generarReportePacientesDoctor: (NSString *) claveDoctor
{
  [self send_generarReportePacientesDoctor : claveDoctor];
  return [self recv_generarReportePacientesDoctor];
}

@end

@implementation ActionsProcessor

- (id) initWithActions: (id <Actions>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_actualizarAnalisis_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"actualizarAnalisis"];
  }
  {
    SEL s = @selector(process_actualizarDoctor_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"actualizarDoctor"];
  }
  {
    SEL s = @selector(process_actualizarPaciente_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"actualizarPaciente"];
  }
  {
    SEL s = @selector(process_borrarAnalisis_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"borrarAnalisis"];
  }
  {
    SEL s = @selector(process_borrarDoctor_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"borrarDoctor"];
  }
  {
    SEL s = @selector(process_borrarPaciente_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"borrarPaciente"];
  }
  {
    SEL s = @selector(process_capturarAnalisis_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"capturarAnalisis"];
  }
  {
    SEL s = @selector(process_capturarDoctor_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"capturarDoctor"];
  }
  {
    SEL s = @selector(process_capturarPaciente_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"capturarPaciente"];
  }
  {
    SEL s = @selector(process_capturarAtiende_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"capturarAtiende"];
  }
  {
    SEL s = @selector(process_capturarSeRealiza_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"capturarSeRealiza"];
  }
  {
    SEL s = @selector(process_consultarAnalisis_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"consultarAnalisis"];
  }
  {
    SEL s = @selector(process_consultarAtiende_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"consultarAtiende"];
  }
  {
    SEL s = @selector(process_consultarDoctores_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"consultarDoctores"];
  }
  {
    SEL s = @selector(process_consultarPacientes_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"consultarPacientes"];
  }
  {
    SEL s = @selector(process_consultarSeRealiza_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"consultarSeRealiza"];
  }
  {
    SEL s = @selector(process_consultarAnalisisClave_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"consultarAnalisisClave"];
  }
  {
    SEL s = @selector(process_consultarPacienteClave_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"consultarPacienteClave"];
  }
  {
    SEL s = @selector(process_consultarDoctorClave_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"consultarDoctorClave"];
  }
  {
    SEL s = @selector(process_consultarAnalisisTipo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"consultarAnalisisTipo"];
  }
  {
    SEL s = @selector(process_consultarDoctoresEspecialidad_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"consultarDoctoresEspecialidad"];
  }
  {
    SEL s = @selector(process_generarReporteAnalisisPaciente_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"generarReporteAnalisisPaciente"];
  }
  {
    SEL s = @selector(process_generarReportePacientesAnalisis_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"generarReportePacientesAnalisis"];
  }
  {
    SEL s = @selector(process_generarReporteDoctoresPaciente_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"generarReporteDoctoresPaciente"];
  }
  {
    SEL s = @selector(process_generarReportePacientesDoctor_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"generarReportePacientesDoctor"];
  }
  return self;
}

- (id<Actions>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_actualizarAnalisis_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  actualizarAnalisis_args * args = [[actualizarAnalisis_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ActualizarAnalisis_result * result = [[ActualizarAnalisis_result alloc] init];
  [result setSuccess: [mService actualizarAnalisis: [args analisis]]];
  [outProtocol writeMessageBeginWithName: @"actualizarAnalisis"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_actualizarDoctor_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  actualizarDoctor_args * args = [[actualizarDoctor_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ActualizarDoctor_result * result = [[ActualizarDoctor_result alloc] init];
  [result setSuccess: [mService actualizarDoctor: [args doctor]]];
  [outProtocol writeMessageBeginWithName: @"actualizarDoctor"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_actualizarPaciente_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  actualizarPaciente_args * args = [[actualizarPaciente_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ActualizarPaciente_result * result = [[ActualizarPaciente_result alloc] init];
  [result setSuccess: [mService actualizarPaciente: [args paciente]]];
  [outProtocol writeMessageBeginWithName: @"actualizarPaciente"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_borrarAnalisis_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  borrarAnalisis_args * args = [[borrarAnalisis_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  BorrarAnalisis_result * result = [[BorrarAnalisis_result alloc] init];
  [result setSuccess: [mService borrarAnalisis: [args claveAnalisis]]];
  [outProtocol writeMessageBeginWithName: @"borrarAnalisis"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_borrarDoctor_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  borrarDoctor_args * args = [[borrarDoctor_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  BorrarDoctor_result * result = [[BorrarDoctor_result alloc] init];
  [result setSuccess: [mService borrarDoctor: [args claveDoctor]]];
  [outProtocol writeMessageBeginWithName: @"borrarDoctor"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_borrarPaciente_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  borrarPaciente_args * args = [[borrarPaciente_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  BorrarPaciente_result * result = [[BorrarPaciente_result alloc] init];
  [result setSuccess: [mService borrarPaciente: [args clavePaciente]]];
  [outProtocol writeMessageBeginWithName: @"borrarPaciente"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_capturarAnalisis_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  capturarAnalisis_args * args = [[capturarAnalisis_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  CapturarAnalisis_result * result = [[CapturarAnalisis_result alloc] init];
  [result setSuccess: [mService capturarAnalisis: [args analisis]]];
  [outProtocol writeMessageBeginWithName: @"capturarAnalisis"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_capturarDoctor_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  capturarDoctor_args * args = [[capturarDoctor_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  CapturarDoctor_result * result = [[CapturarDoctor_result alloc] init];
  [result setSuccess: [mService capturarDoctor: [args doctor]]];
  [outProtocol writeMessageBeginWithName: @"capturarDoctor"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_capturarPaciente_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  capturarPaciente_args * args = [[capturarPaciente_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  CapturarPaciente_result * result = [[CapturarPaciente_result alloc] init];
  [result setSuccess: [mService capturarPaciente: [args paciente]]];
  [outProtocol writeMessageBeginWithName: @"capturarPaciente"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_capturarAtiende_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  capturarAtiende_args * args = [[capturarAtiende_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  CapturarAtiende_result * result = [[CapturarAtiende_result alloc] init];
  [result setSuccess: [mService capturarAtiende: [args atiende]]];
  [outProtocol writeMessageBeginWithName: @"capturarAtiende"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_capturarSeRealiza_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  capturarSeRealiza_args * args = [[capturarSeRealiza_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  CapturarSeRealiza_result * result = [[CapturarSeRealiza_result alloc] init];
  [result setSuccess: [mService capturarSeRealiza: [args seRealiza]]];
  [outProtocol writeMessageBeginWithName: @"capturarSeRealiza"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_consultarAnalisis_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  consultarAnalisis_args * args = [[consultarAnalisis_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConsultarAnalisis_result * result = [[ConsultarAnalisis_result alloc] init];
  [result setSuccess: [mService consultarAnalisis]];
  [outProtocol writeMessageBeginWithName: @"consultarAnalisis"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_consultarAtiende_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  consultarAtiende_args * args = [[consultarAtiende_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConsultarAtiende_result * result = [[ConsultarAtiende_result alloc] init];
  [result setSuccess: [mService consultarAtiende]];
  [outProtocol writeMessageBeginWithName: @"consultarAtiende"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_consultarDoctores_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  consultarDoctores_args * args = [[consultarDoctores_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConsultarDoctores_result * result = [[ConsultarDoctores_result alloc] init];
  [result setSuccess: [mService consultarDoctores]];
  [outProtocol writeMessageBeginWithName: @"consultarDoctores"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_consultarPacientes_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  consultarPacientes_args * args = [[consultarPacientes_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConsultarPacientes_result * result = [[ConsultarPacientes_result alloc] init];
  [result setSuccess: [mService consultarPacientes]];
  [outProtocol writeMessageBeginWithName: @"consultarPacientes"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_consultarSeRealiza_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  consultarSeRealiza_args * args = [[consultarSeRealiza_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConsultarSeRealiza_result * result = [[ConsultarSeRealiza_result alloc] init];
  [result setSuccess: [mService consultarSeRealiza]];
  [outProtocol writeMessageBeginWithName: @"consultarSeRealiza"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_consultarAnalisisClave_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  consultarAnalisisClave_args * args = [[consultarAnalisisClave_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConsultarAnalisisClave_result * result = [[ConsultarAnalisisClave_result alloc] init];
  [result setSuccess: [mService consultarAnalisisClave: [args clave]]];
  [outProtocol writeMessageBeginWithName: @"consultarAnalisisClave"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_consultarPacienteClave_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  consultarPacienteClave_args * args = [[consultarPacienteClave_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConsultarPacienteClave_result * result = [[ConsultarPacienteClave_result alloc] init];
  [result setSuccess: [mService consultarPacienteClave: [args clave]]];
  [outProtocol writeMessageBeginWithName: @"consultarPacienteClave"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_consultarDoctorClave_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  consultarDoctorClave_args * args = [[consultarDoctorClave_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConsultarDoctorClave_result * result = [[ConsultarDoctorClave_result alloc] init];
  [result setSuccess: [mService consultarDoctorClave: [args clave]]];
  [outProtocol writeMessageBeginWithName: @"consultarDoctorClave"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_consultarAnalisisTipo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  consultarAnalisisTipo_args * args = [[consultarAnalisisTipo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConsultarAnalisisTipo_result * result = [[ConsultarAnalisisTipo_result alloc] init];
  [result setSuccess: [mService consultarAnalisisTipo: [args tipo]]];
  [outProtocol writeMessageBeginWithName: @"consultarAnalisisTipo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_consultarDoctoresEspecialidad_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  consultarDoctoresEspecialidad_args * args = [[consultarDoctoresEspecialidad_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ConsultarDoctoresEspecialidad_result * result = [[ConsultarDoctoresEspecialidad_result alloc] init];
  [result setSuccess: [mService consultarDoctoresEspecialidad: [args especialidad]]];
  [outProtocol writeMessageBeginWithName: @"consultarDoctoresEspecialidad"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_generarReporteAnalisisPaciente_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  generarReporteAnalisisPaciente_args * args = [[generarReporteAnalisisPaciente_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GenerarReporteAnalisisPaciente_result * result = [[GenerarReporteAnalisisPaciente_result alloc] init];
  [result setSuccess: [mService generarReporteAnalisisPaciente: [args clavePaciente]]];
  [outProtocol writeMessageBeginWithName: @"generarReporteAnalisisPaciente"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_generarReportePacientesAnalisis_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  generarReportePacientesAnalisis_args * args = [[generarReportePacientesAnalisis_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GenerarReportePacientesAnalisis_result * result = [[GenerarReportePacientesAnalisis_result alloc] init];
  [result setSuccess: [mService generarReportePacientesAnalisis: [args claveAnalisis]]];
  [outProtocol writeMessageBeginWithName: @"generarReportePacientesAnalisis"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_generarReporteDoctoresPaciente_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  generarReporteDoctoresPaciente_args * args = [[generarReporteDoctoresPaciente_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GenerarReporteDoctoresPaciente_result * result = [[GenerarReporteDoctoresPaciente_result alloc] init];
  [result setSuccess: [mService generarReporteDoctoresPaciente: [args clavePaciente]]];
  [outProtocol writeMessageBeginWithName: @"generarReporteDoctoresPaciente"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_generarReportePacientesDoctor_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  generarReportePacientesDoctor_args * args = [[generarReportePacientesDoctor_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GenerarReportePacientesDoctor_result * result = [[GenerarReportePacientesDoctor_result alloc] init];
  [result setSuccess: [mService generarReportePacientesDoctor: [args claveDoctor]]];
  [outProtocol writeMessageBeginWithName: @"generarReportePacientesDoctor"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

